[{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://lxiao06.github.io/ASAP/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://lxiao06.github.io/ASAP/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lei Xiao. Author, maintainer.","code":""},{"path":"https://lxiao06.github.io/ASAP/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Xiao L (2025). ASAP: Automated Sound Analysis Pipeline Avian Vocalization Research. R package version 0.3.3, https://lxiao06.github.io/ASAP/.","code":"@Manual{,   title = {ASAP: Automated Sound Analysis Pipeline for Avian Vocalization Research},   author = {Lei Xiao},   year = {2025},   note = {R package version 0.3.3},   url = {https://lxiao06.github.io/ASAP/}, }"},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Automated Sound Analysis Pipeline for Avian Vocalization Research","text":"ASAP (Automated Sound Analysis Pipeline) R toolkit designed longitudinal analysis birdsong development, specifically optimized tracking studying long-term vocalization patterns zebra finches. pipeline introduces dedicated SAP object, streamlines processing recordings SAP2011 system sound data organized similar structures. Additionally, ASAP built flexibility mind, allowing integration objects ensure compatibility various recording platforms.","code":""},{"path":"https://lxiao06.github.io/ASAP/index.html","id":"key-features","dir":"","previous_headings":"Overview","what":"Key Features","title":"Automated Sound Analysis Pipeline for Avian Vocalization Research","text":"Bout Detection: Automatically identifies periods singing within recordings. Motif Extraction: Extracts recurring song motifs -depth analysis. Syllable Segmentation: Breaks songs individual syllables detailed study. Template Matching: Compares matches song patterns predefined templates. Feature Extraction: Extracts detailed temporal spectral features vocalizations. Standardized Analytical Workflows: Utilizes predefined workflows consistent efficient analysis.","code":""},{"path":"https://lxiao06.github.io/ASAP/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Automated Sound Analysis Pipeline for Avian Vocalization Research","text":"install ASAP, recommend using remotes:","code":"require(remotes) remotes::install_github(\"LXiao06/ASAP\")"},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/index.html","id":"detecting-bout-boundaries-and-syllable-segmentation","dir":"","previous_headings":"Example","what":"Detecting Bout Boundaries and Syllable Segmentation","title":"Automated Sound Analysis Pipeline for Avian Vocalization Research","text":"example demonstrates use functions detect bout boundaries perform syllable segmentation single WAV file zebra finch recording.","code":"library(ASAP) # Get path to example WAV file wav_file <- system.file(\"extdata\", \"zf_example.wav\", package = \"ASAP\")    # Find bout bouts <- find_bout(wav_file, rms_threshold= 0.1, min_duration = 0.7) # Segmentation  syllables <- segment(wav_file, start_time = 1, end_time = 5, flim = c(1, 8),                      silence_threshold = 0.01, min_syllable_ms = 20,                       max_syllable_ms = 240, min_level_db = 10, verbose = FALSE)"},{"path":"https://lxiao06.github.io/ASAP/index.html","id":"standardized-song-analysis-pipeline-for-motif-analysis","dir":"","previous_headings":"Example","what":"Standardized Song Analysis Pipeline for Motif Analysis","title":"Automated Sound Analysis Pipeline for Avian Vocalization Research","text":"example demonstrates song analysis pipeline initiated creating SAP object, tracks visualizes motif changes time using heatmaps latent space projections.","code":"# Create sap object  sap <- create_sap_object(   base_path = \"/path/to/your/wav/file/directory\",   subfolders_to_include = c(\"190\", \"201\", \"203\"),   labels = c(\"BL\", \"Post\", \"Rec\") )  # A standardized pipeline for motif analysis sap <- sap |>   create_audio_clip(indices = 1, start_time = 1, end_time = 2.5,                     clip_names = \"m1\") |>   create_template(template_name = \"d\", clip_name = \"m1\",                   start_time = 0.72,   end_time =  0.84,                   freq_min = 1,  freq_max = 10,                   threshold = 0.5, write_template = TRUE) |>   detect_template(template_name = \"d\") |>   find_motif(template_name = \"d\", pre_time = 0.7, lag_time = 0.5) |>   analyze_spectral(balanced = TRUE) |>   find_clusters() |>   run_umap() |>   create_trajectory_matrix(data_type = \"feat.embeds\", clusters = c(0, 1), balanced = TRUE) |>   run_pca()  |>   run_umap(data_type = \"traj_mat\", min_dist = 0.5)   # Visualization sap <- sap |>   plot_heatmap(balanced = TRUE, ordered = TRUE)|>   plot_umap(split.by = \"label\") |>   plot_umap2(data_type = \"traj.embeds\", overlay_mode = TRUE,               base_label = \"BL\", compare_labels =\"Rec\")"},{"path":"https://lxiao06.github.io/ASAP/reference/ASAP-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ASAP: Automated Sound Analysis Pipeline for Avian Vocalization Research — ASAP-package","title":"ASAP: Automated Sound Analysis Pipeline for Avian Vocalization Research — ASAP-package","text":"comprehensive toolkit longitudinal analysis birdsong development. ASAP provides integrated suite tools processing, analyzing, visualizing avian vocalizations, particular emphasis zebra finch song recordings SAP2011. package implements automated workflows bout detection, motif extraction, syllable segmentation, template matching, temporal spectral feature extraction, enabling researchers track subtle changes vocal patterns across developmental time points. efficient parallel processing standardized analytical approaches, ASAP facilitates large-scale longitudinal studies song learning development, offering researchers powerful tools quantifying vocal plasticity investigating mechanisms vocal learning songbirds.","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/ASAP-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ASAP: Automated Sound Analysis Pipeline for Avian Vocalization Research — ASAP-package","text":"Maintainer: Lei Xiao Leixiao2006@gmail.com (ORCID)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/FF_single_row.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to calculate the fundamental frequency of time series data derived from a single audio segment — FF_single_row","title":"Internal function to calculate the fundamental frequency of time series data derived from a single audio segment — FF_single_row","text":"Estimates fundamental frequency (F0) audio segment using either cepstral analysis YIN method specified audio segment.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/FF_single_row.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to calculate the fundamental frequency of time series data derived from a single audio segment — FF_single_row","text":"","code":"FF_single_row(   segment_row,   wav_dir = NULL,   method = c(\"cepstrum\", \"yin\"),   wl = 512,   ovlp = 50,   fmax = 1400,   threshold = 10,   plot = FALSE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/FF_single_row.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to calculate the fundamental frequency of time series data derived from a single audio segment — FF_single_row","text":"segment_row single-row data frame containing segment information wav_dir Directory containing wav files. method Pitch estimation method. Either \"cepstrum\" \"yin\" (default: \"cepstrum\") wl Window length spectral analysis (default: 512) ovlp Overlap percentage windows (default: 80) fmax Maximum frequency consider (default: 1400 Hz) threshold Threshold Amplitude threshold cepstral method % (default = 10). plot Logical, whether plot pitch estimation (default: FALSE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/FF_single_row.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to calculate the fundamental frequency of time series data derived from a single audio segment — FF_single_row","text":"matrix two columns: First column: Time points Second column: Fundamental frequency values","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/Fundamental_Frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Fundamental Frequency Analysis and Visualization — FF","title":"Fundamental Frequency Analysis and Visualization — FF","text":"Creates fundamental frequency analyses visualizations audio segments, supporting multiple data types (WAV file, data frames, SAP objects) visualization options. Provides analytical results optional single trial heatmap visualizations.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/Fundamental_Frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fundamental Frequency Analysis and Visualization — FF","text":"","code":"FF(x, ...)  # Default S3 method FF(   x,   start_time = NULL,   end_time = NULL,   wl = 512,   ovlp = 50,   fmax = 1400,   threshold = 10,   method = c(\"cepstrum\", \"yin\"),   plot = TRUE,   ... )  # S3 method for class 'data.frame' FF(   x,   wav_dir = NULL,   wl = 512,   ovlp = 50,   fmax = 1400,   threshold = 10,   method = c(\"cepstrum\", \"yin\"),   plot = TRUE,   plot_freq_lim = NULL,   color_palette = NULL,   n_colors = 500,   cores = NULL,   ... )  # S3 method for class 'Sap' FF(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   clusters = NULL,   cores = NULL,   seed = 222,   wl = 512,   ovlp = 50,   fmax = 1400,   threshold = 10,   method = c(\"cepstrum\", \"yin\"),   plot = TRUE,   plot_freq_lim = NULL,   color_palette = NULL,   n_colors = 500,   ordered = FALSE,   descending = TRUE,   verbose = TRUE,   ... )  # S3 method for class 'matrix' FF(   x,   labels = NULL,   plot_freq_lim = NULL,   color_palette = NULL,   n_colors = 500,   main = \"Fundamental Frequency Heatmap\",   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/Fundamental_Frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fundamental Frequency Analysis and Visualization — FF","text":"x Input object: character: path WAV file (default method) data frame: containing segment information SAP object Pre-computed F0 matrix ... Additional arguments passed methods lattice::levelplot start_time Numeric, start time seconds (default method) end_time Numeric, end time seconds (default method) wl Window length spectral analysis (default: 512) ovlp Overlap percentage windows (default: 50) fmax Maximum frequency consider (default: 1400 Hz) threshold Amplitude threshold pitch detection % (default: 10) method Pitch estimation method (\"cepstrum\" \"yin\") plot Logical, whether generate visualization(default: TRUE) wav_dir Directory containing WAV files (data frame methods) plot_freq_lim Optional vector length 2 specifying frequency limits plotting color_palette Function generating color palette (default: black--red spectrum) n_colors Number colors heatmap (default: 500) cores Number cores parallel processing segment_type SAP objects: Type segments (currently 'motifs') sample_percent SAP objects: Percentage segments sample balanced SAP objects: Whether balance samples across labels labels Optional vector labels subsetting grouping clusters SAP objects: Numeric vector cluster IDs include seed Random seed sampling (default: 222) ordered SAP objects: Whether order feature embeddings descending SAP objects: Direction embedding-based ordering verbose Logical, whether print progress messages main Plot title (matrix method)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/Fundamental_Frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fundamental Frequency Analysis and Visualization — FF","text":"Returns object depending method used: Default method: Matrix time frequency values Data frame method: List F0 matrix metadata SAP method: Updated SAP object F0 features Matrix method: Lattice plot object (invisibly)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/Fundamental_Frequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fundamental Frequency Analysis and Visualization — FF","text":"function provides different methods depending input type: Default method (WAV file method): Analyzes single WAV file within specified time window Supports cepstrum YIN-based pitch detection Creates spectrogram F0 overlay visualization Data frame method: Processes multiple segments parallel Normalizes time series across renditions Creates aligned F0 matrix Generates heatmap visualization multiple segments SAP object method: Integrates SAP feature analysis pipeline Supports segment filtering ordering Stores results features component Matrix method: Visualizes pre-computed F0 data Supports label-based organization Adds visual separators groups","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/Fundamental_Frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fundamental Frequency Analysis and Visualization — FF","text":"","code":"if (FALSE) { # \\dontrun{ # Single WAV file analysis FF(\"path/to/sound.wav\", start_time = 1, end_time = 2)  # Multiple segment analysis FF(segments_df, wav_dir = \"path/to/wavs\",    plot = TRUE, plot_freq_lim = c(0.5, 1.5))  # SAP object analysis FF(sap_obj, ordered = TRUE, balanced = TRUE,    sample_percent = 80, seed = 123)  # Direct matrix visualization FF(f0_matrix, labels = c(\"a\", \"b\", \"c\"),    main = \"Custom Title\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/GroupSingletons.html","id":null,"dir":"Reference","previous_headings":"","what":"Group Singleton Clusters — GroupSingletons","title":"Group Singleton Clusters — GroupSingletons","text":"Internal function handle singleton clusters.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/GroupSingletons.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group Singleton Clusters — GroupSingletons","text":"","code":"GroupSingletons(ids, SNN, group.singletons = TRUE, verbose = TRUE)"},{"path":"https://lxiao06.github.io/ASAP/reference/RunModularityClustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Modularity Clustering — RunModularityClustering","title":"Run Modularity Clustering — RunModularityClustering","text":"Internal function run modularity optimization.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/RunModularityClustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Modularity Clustering — RunModularityClustering","text":"","code":"RunModularityClustering(   SNN = matrix(),   modularity = 1,   resolution = 0.8,   algorithm = 1,   n.start = 10,   n.iter = 10,   random.seed = 0,   print.output = TRUE,   temp.file.location = NULL,   edge.file.name = NULL )"},{"path":"https://lxiao06.github.io/ASAP/reference/amp_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Amplitude Envelope for Audio Segment — amp_env","title":"Calculate Amplitude Envelope for Audio Segment — amp_env","text":"Calculates amplitude envelope specified segment audio file.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/amp_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Amplitude Envelope for Audio Segment — amp_env","text":"","code":"amp_env(   segment_row,   wav_dir = NULL,   msmooth = NULL,   norm = FALSE,   plot = FALSE )"},{"path":"https://lxiao06.github.io/ASAP/reference/amp_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Amplitude Envelope for Audio Segment — amp_env","text":"segment_row row either find_motif output segment class SAP object wav_dir Optional path WAV files directory (default: NULL) msmooth Numeric vector length 2 envelope smoothing: First value: Window length number points Second value: Overlap windows (percentage) NULL, smoothing applied norm Logical, Whether normalize envelope range 0 1 (default: FALSE) plot Logical, whether plot envelope (default: FALSE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/amp_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Amplitude Envelope for Audio Segment — amp_env","text":"numeric vector containing amplitude envelope values","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/amp_env.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Amplitude Envelope for Audio Segment — amp_env","text":"function processes audio segments following steps: Validates input segment data Constructs correct file path Reads specified portion audio file Calculates amplitude envelope Optionally smooths normalizes envelope","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/amp_env.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Amplitude Envelope for Audio Segment — amp_env","text":"","code":"if (FALSE) { # \\dontrun{ # Basic envelope calculation env <- amp_env(segments[1,], wav_dir = \"path/to/wavs\")  # With smoothing and normalization env <- amp_env(segments[1,],                wav_dir = \"path/to/wavs\",                msmooth = c(256, 50),                norm = TRUE)  # With plot env <- amp_env(segments[1,],                wav_dir = \"path/to/wavs\",                msmooth = c(256, 50),                plot = TRUE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/analyze_spectral.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Spectral Features of Audio Segments — analyze_spectral","title":"Analyze Spectral Features of Audio Segments — analyze_spectral","text":"Calculates comprehensive spectral features audio segments support parallel processing organized data structures.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/analyze_spectral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Spectral Features of Audio Segments — analyze_spectral","text":"","code":"analyze_spectral(x, ...)  # Default S3 method analyze_spectral(   x,   wav_dir = NULL,   cores = NULL,   wl = 512,   ovlp = 50,   wn = \"hanning\",   fftw = TRUE,   freq_range = NULL,   threshold = 15,   fsmooth = 0.1,   fast = TRUE,   ... )  # S3 method for class 'Sap' analyze_spectral(   x,   segment_type = c(\"motifs\", \"syllables\", \"bouts\", \"segments\"),   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   seed = 222,   cores = NULL,   wl = 512,   ovlp = 50,   wn = \"hanning\",   fftw = TRUE,   freq_range = NULL,   threshold = 15,   fsmooth = 0.1,   fast = TRUE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/analyze_spectral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Spectral Features of Audio Segments — analyze_spectral","text":"x object analyze, either data frame SAP object ... Additional arguments passed specific methods wav_dir Directory containing WAV files cores Number cores parallel processing wl Window length spectral analysis (default: 512) ovlp Overlap percentage (0-100) (default: 50) wn Window name (\"hanning\", \"hamming\", etc.) fftw Logical, use FFTW (default: TRUE) freq_range Frequency range c(min, max) kHz threshold Threshold frequency tracking (default: 15) fsmooth Frequency smoothing parameter (default: 0.1) fast Whether skip peak frequency calculation (default: TRUE) segment_type SAP objects: Type segments ('motifs', 'syllables', 'bouts', 'segments') sample_percent SAP objects: Percentage segments sample balanced SAP objects: Whether balance groups across labels labels SAP objects: Specific labels include seed SAP objects: Random seed sampling (default: 222) verbose SAP objects: Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/analyze_spectral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Spectral Features of Audio Segments — analyze_spectral","text":"default method: data frame containing spectral features segments SAP objects: Updated SAP object spectral features stored features slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/analyze_spectral.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze Spectral Features of Audio Segments — analyze_spectral","text":"data frames: Requires columns: filename, start_time, end_time Processes segments parallel Calculates comprehensive spectral features Returns combined results SAP objects: Supports multiple segment types Optional balanced sampling Stores results features slot Preserves segment metadata","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/analyze_spectral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze Spectral Features of Audio Segments — analyze_spectral","text":"","code":"if (FALSE) { # \\dontrun{ # Analyze segments from data frame features <- analyze_spectral(segments,                             wav_dir = \"path/to/wavs\",                             cores = 4,                             freq_range = c(1, 10))  # Basic analysis from SAP object sap_obj <- analyze_spectral(sap_object,                            segment_type = \"motifs\",                            cores = 4)  # Balanced sampling with specific labels sap_obj <- analyze_spectral(sap_object,                            segment_type = \"syllables\",                            sample_percent = 80,                            balanced = TRUE,                            labels = c(\"a\", \"b\"))  # Custom spectral parameters sap_obj <- analyze_spectral(sap_object,                            segment_type = \"motifs\",                            wl = 1024,                            ovlp = 75,                            freq_range = c(2, 8)) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/anova_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","title":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","text":"Performs one-way ANOVA Tukey's HSD test multiple comparisons across different segments. Provides statistical results optional visualization.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/anova_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","text":"","code":"anova_analysis(stats_df, plot = TRUE)"},{"path":"https://lxiao06.github.io/ASAP/reference/anova_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","text":"stats_df data frame containing columns: segment_id: Numeric identifier segments label: Factor character indicating groups compare mean: Numeric values comparison plot Logical, whether create boxplot visualization (default: TRUE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/anova_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","text":"tibble containing ANOVA results columns: segment_id: Segment identifier term: Source variation (label Residuals) df: Degrees freedom sumsq: Sum squares meansq: Mean squares statistic: F-statistic p.value: P-value significant: Logical indicating p.value < 0.05","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/anova_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","text":"function performs two main analyses: One-way ANOVA segment Tukey's HSD test multiple comparisons adjusted p-values printed output includes: Tukey's HSD results adjusted p-values Significance levels: *** (p<0.001), ** (p<0.01), * (p<0.05), ns (p>=0.05) Optional boxplot visualization","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/anova_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform ANOVA and Multiple Comparisons Analysis — anova_analysis","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage results <- anova_results(stats_df)  # Without plot results <- anova_results(stats_df, plot = FALSE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/as_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data to a segment object — as_segment","title":"Convert data to a segment object — as_segment","text":"Convert data segment object","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/as_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data to a segment object — as_segment","text":"","code":"as_segment(x)"},{"path":"https://lxiao06.github.io/ASAP/reference/as_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data to a segment object — as_segment","text":"x data frame convert segment object","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/as_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data to a segment object — as_segment","text":"validated segment object","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/as_segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data to a segment object — as_segment","text":"","code":"if (FALSE) { # \\dontrun{ df <- data.frame(   filename = \"song.wav\",   day_post_hatch = 1,   label = \"a\",   start_time = 0,   end_time = 1,   duration = 1 ) segment <- as_segment(df) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/auto_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic Syllable Labeling in Song Motif — auto_label","title":"Automatic Syllable Labeling in Song Motif — auto_label","text":"Performs two-stage clustering bird song segments identify syllables: Temporal clustering using weighted time duration features UMAP-based refinement temporal clusters Finally merges similar clusters based UMAP proximity.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/auto_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic Syllable Labeling in Song Motif — auto_label","text":"","code":"auto_label(   x,   eps_time = 0.1,   eps_umap = 0.6,   min_pts = 5,   outlier_threshold = 0.01,   umap_threshold = 1,   weight_time = 4,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/auto_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic Syllable Labeling in Song Motif — auto_label","text":"x Sap object containing bird song analysis data eps_time Epsilon parameter temporal DBSCAN clustering (default: 0.1) eps_umap Epsilon parameter UMAP-based DBSCAN clustering (default: 0.6) min_pts Minimum points parameter DBSCAN clustering (default: 5) outlier_threshold Threshold removing small clusters (default: 0.01) umap_threshold Distance threshold merging similar clusters (default: 1) weight_time Weight factor temporal features (default: 4) ... Additional arguments (currently used)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/auto_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic Syllable Labeling in Song Motif — auto_label","text":"Returns input Sap object updated syllable clusters : x$features$syllable$feat.embeds","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/auto_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatic Syllable Labeling in Song Motif — auto_label","text":"function performs clustering multiple stages: Temporal Clustering: Combines time position duration information Uses weighted features (controlled weight_time): weight_time > 1: Emphasizes temporal position duration weight_time = 1: Equal weighting weight_time < 1: Emphasizes duration temporal position UMAP-based Refinement: splits temporal clusters based UMAP coordinates Helps distinguish syllables similar timing different acoustic features Cluster Cleaning: Removes small clusters (controlled outlier_threshold) Merges similar clusters based UMAP proximity (controlled umap_threshold) Parameter Tuning Guidelines: eps_time: Controls temporal separation sensitivity Smaller values create temporal splits Typical range: 0.05-0.2 eps_umap: Controls acoustic feature sensitivity Smaller values create acoustic splits Typical range: 0.4-0.8 weight_time: Controls temporal vs duration importance Default (4) weights time 4x duration Increase temporal separation Decrease duration-based separation","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/auto_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatic Syllable Labeling in Song Motif — auto_label","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with default parameters sap <- auto_label(sap)  # Emphasize temporal separation sap <- auto_label(sap,                  eps_time = 0.08,                  weight_time = 6)  # More acoustic feature sensitivity sap <- auto_label(sap,                  eps_umap = 0.4,                  min_pts = 3)  # Stricter cluster cleaning sap <- auto_label(sap,                  outlier_threshold = 0.02,                  umap_threshold = 0.8) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/check_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a package is available — check_pkg","title":"Check if a package is available — check_pkg","text":"Check package available","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/check_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a package is available — check_pkg","text":"","code":"check_pkg(pkg_name)"},{"path":"https://lxiao06.github.io/ASAP/reference/check_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a package is available — check_pkg","text":"pkg_name Character name package","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/check_pkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a package is available — check_pkg","text":"TRUE package available, FALSE otherwise","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/check_python_dependencies.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Python dependencies — check_python_dependencies","title":"Check Python dependencies — check_python_dependencies","text":"Check Python dependencies","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/check_python_dependencies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Python dependencies — check_python_dependencies","text":"","code":"check_python_dependencies(verbose = FALSE)"},{"path":"https://lxiao06.github.io/ASAP/reference/compute_rms.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute RMS Envelope — compute_rms","title":"Compute RMS Envelope — compute_rms","text":"Internal function calculate RMS envelope audio signal.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/compute_rms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute RMS Envelope — compute_rms","text":"","code":"compute_rms(data, wl, ovlp)"},{"path":"https://lxiao06.github.io/ASAP/reference/compute_rms.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute RMS Envelope — compute_rms","text":"wl Window length RMS calculation (default: 1024) ovlp Overlap percentage windows (default: 50)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/compute_wav_durations.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute WAV File Durations — compute_wav_durations","title":"Compute WAV File Durations — compute_wav_durations","text":"Calculates durations WAV files referenced SAP object's metadata using parallel processing. Handles missing files gracefully returning NA durations providing warnings.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/compute_wav_durations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute WAV File Durations — compute_wav_durations","text":"","code":"compute_wav_durations(x, cores = NULL, verbose = TRUE)"},{"path":"https://lxiao06.github.io/ASAP/reference/compute_wav_durations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute WAV File Durations — compute_wav_durations","text":"x SAP object containing metadata base path audio files cores Number cores use parallel processing (NULL auto-detection: total cores - 1) verbose Logical flag control progress messages warnings (default: TRUE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/compute_wav_durations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute WAV File Durations — compute_wav_durations","text":"Returns modified SAP object added duration column metadata containing wave file durations seconds. Missing files NA durations.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/compute_wav_durations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute WAV File Durations — compute_wav_durations","text":"Key features: Parallel processing implementation using parallel_apply Automatic core detection fallback single-core processing Progress tracking missing file warnings Preserves original object structure adding duration information","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_audio_clip.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Audio Clips from Sound Files — create_audio_clip","title":"Create Audio Clips from Sound Files — create_audio_clip","text":"Creates audio clips WAV files SAP objects extracting specified time segments.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_audio_clip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Audio Clips from Sound Files — create_audio_clip","text":"","code":"create_audio_clip(x, ...)  # Default S3 method create_audio_clip(   x,   ...,   start_time,   end_time,   clip_name = NULL,   unit = \"second\" )  # S3 method for class 'Sap' create_audio_clip(   x,   indices,   start_time,   end_time,   clip_names,   unit = \"second\",   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/create_audio_clip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Audio Clips from Sound Files — create_audio_clip","text":"x object process, either file path SAP object ... Additional arguments passed specific methods start_time Numeric start time(s) clip(s) end_time Numeric end time(s) clip(s) clip_name, clip_names Name(s) output clip(s) unit Time unit (\"second\" \"millisecond\") indices SAP objects: Numeric vector indices process verbose SAP objects: Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_audio_clip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Audio Clips from Sound Files — create_audio_clip","text":"default method: Character string containing path created audio clip SAP objects: Updated SAP object new template information Updated SAP object new template information","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_audio_clip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Audio Clips from Sound Files — create_audio_clip","text":"single WAV files: Validates input file time parameters Creates templates directory needed Extracts specified segment audio file SAP objects: Creates clips specified indices Updates template information SAP object Maintains metadata created clips","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_audio_clip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Audio Clips from Sound Files — create_audio_clip","text":"","code":"if (FALSE) { # \\dontrun{ # Create clip from single WAV file create_audio_clip(\"path/to/song.wav\",                   start_time = 10,                   end_time = 20,                   clip_name = \"song_clip\")  # Create multiple clips from SAP object create_audio_clip(sap_object,                   indices = c(1, 2),                   start_time = c(10, 20),                   end_time = c(20, 30),                   clip_names = c(\"clip1\", \"clip2\"))  # Create clip with millisecond units create_audio_clip(\"song.wav\",                   start_time = 10000,                   end_time = 20000,                   unit = \"millisecond\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Create metadata for audio files recorded by SAP2011 (Sound Analysis Pro) — create_sap_metadata","title":"Create metadata for audio files recorded by SAP2011 (Sound Analysis Pro) — create_sap_metadata","text":"Creates metadata data frame WAV files specified directories. Parses filenames extract information bird ID, recording date, time.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create metadata for audio files recorded by SAP2011 (Sound Analysis Pro) — create_sap_metadata","text":"","code":"create_sap_metadata(   base_path,   subfolders_to_include = NULL,   subfolders_to_exclude = c(\"templates\", \"temp_plots\"),   labels )"},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create metadata for audio files recorded by SAP2011 (Sound Analysis Pro) — create_sap_metadata","text":"base_path Character string specifying base directory path subfolders_to_include Character vector subfolder names include. NULL, includes subfolders except subfolders_to_exclude subfolders_to_exclude Character vector subfolder names exclude. Default excludes 'templates' 'temp_plots' labels Character vector labels corresponding subfolder. Must match length subfolders","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create metadata for audio files recorded by SAP2011 (Sound Analysis Pro) — create_sap_metadata","text":"data frame containing metadata columns: filename Name WAV file bird_id Extracted bird identifier day_post_hatch Day post hatch (subfolder name) recording_date Date recording (MM-DD format) recording_time Time recording (HH:MM:SS format) label Label assigned subfolder","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create metadata for audio files recorded by SAP2011 (Sound Analysis Pro) — create_sap_metadata","text":"","code":"if (FALSE) { # \\dontrun{ metadata <- create_sap_metadata(   base_path = \"path/to/recordings\",   subfolders_to_include = c(\"day1\", \"day2\"),   labels = c(\"pre\", \"post\") ) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_object.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","title":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","text":"Creates comprehensive SAP object WAV files specified directories, robust input validation metadata extraction.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_object.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","text":"","code":"create_sap_object(   base_path,   subfolders_to_include = NULL,   subfolders_to_exclude = c(\"templates\", \"plots\"),   labels )"},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_object.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","text":"base_path Character string specifying base directory path containing audio recordings subfolders_to_include Character vector subfolder names include. NULL, includes subfolders except subfolders_to_exclude subfolders_to_exclude Character vector subfolder names exclude. Default excludes 'templates' 'plots' labels Character vector labels corresponding subfolder. Must match length subfolders","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_object.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","text":"SAP object containing: metadata Data frame file recording metadata base_path Original base directory path misc List creation details timestamps","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_object.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","text":"function performs several key operations: Validates input base path contents Creates metadata WAV files using create_sap_metadata() Constructs SAP object metadata additional tracking information Validates created SAP object","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/create_sap_object.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Sound Analysis Pro (SAP) Object from Audio Recordings — create_sap_object","text":"","code":"if (FALSE) { # \\dontrun{ # Create SAP object from all recordings sap_obj <- create_sap_object(\"path/to/recordings\")  # Create SAP object with specific subfolders and labels sap_obj <- create_sap_object(   base_path = \"path/to/recordings\",   subfolders_to_include = c(\"day1\", \"day2\"),   labels = c(\"pre\", \"post\") ) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/create_sliding_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Sliding Windows for Segment — create_sliding_window","title":"Create Sliding Windows for Segment — create_sliding_window","text":"Internal function generate overlapping time windows segment.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sliding_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Sliding Windows for Segment — create_sliding_window","text":"","code":"create_sliding_window(i, x, window_size = 0.1, step_size = 0.005, ...)"},{"path":"https://lxiao06.github.io/ASAP/reference/create_sliding_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Sliding Windows for Segment — create_sliding_window","text":"Rendition number x Data frame segment information window_size Window size seconds step_size Step size seconds ... Additional arguments","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_sliding_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Sliding Windows for Segment — create_sliding_window","text":"Data frame containing sliding window information","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Correlation Templates for Song Analysis — create_template","title":"Create Correlation Templates for Song Analysis — create_template","text":"Creates correlation templates WAV files SAP objects song detection analysis.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Correlation Templates for Song Analysis — create_template","text":"","code":"create_template(x, ...)  # Default S3 method create_template(   x,   template_name,   start_time = NULL,   end_time = NULL,   freq_min = 0,   freq_max = 15,   threshold = 0.6,   write_template = FALSE,   ... )  # S3 method for class 'Sap' create_template(   x,   template_name,   clip_name,   start_time = NULL,   end_time = NULL,   freq_min = 0,   freq_max = 15,   threshold = 0.6,   write_template = FALSE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/create_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Correlation Templates for Song Analysis — create_template","text":"x object process, either file path SAP object ... Additional arguments passed specific methods template_name Character name template start_time Numeric start time template segment end_time Numeric end time template segment freq_min Numeric minimum frequency kHz (default: 0) freq_max Numeric maximum frequency kHz (default: 15) threshold Numeric correlation threshold (default: 0.6) write_template Logical whether write template disk clip_name SAP objects: Character name clip use verbose SAP objects: Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Correlation Templates for Song Analysis — create_template","text":"default method: correlation template object monitoR package SAP objects: Updated SAP object new template information","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Correlation Templates for Song Analysis — create_template","text":"WAV files: Validates input parameters Creates template using monitoR package Optionally writes template disk SAP objects: Validates clip existence Creates template using specified parameters Updates SAP object template information","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/create_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Correlation Templates for Song Analysis — create_template","text":"","code":"if (FALSE) { # \\dontrun{ # Create template from WAV file template <- create_template(\"path/to/song.wav\",                            template_name = \"template1\",                            start_time = 1.0,                            end_time = 2.0,                            freq_min = 2,                            freq_max = 8)  # Create and save template template <- create_template(\"song.wav\",                            template_name = \"template2\",                            start_time = 1.0,                            end_time = 2.0,                            write_template = TRUE)  # Create template from SAP object sap_obj <- create_template(sap_object,                           template_name = \"template1\",                           clip_name = \"clip1\",                           freq_min = 2,                           freq_max = 8) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/create_trajectory_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","title":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","text":"Creates spectrogram matrices sliding windows song trajectory analysis.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_trajectory_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","text":"","code":"create_trajectory_matrix(x, ...)  # Default S3 method create_trajectory_matrix(   x,   wav_dir,   window_size = 0.1,   step_size = 0.005,   wl = 128,   ovlp = 50,   fftw = TRUE,   flim = c(1, 12),   cores = NULL,   ... )  # S3 method for class 'Sap' create_trajectory_matrix(   x,   segment_type = c(\"motifs\", \"syllables\", \"bouts\", \"segments\"),   data_type = NULL,   clusters = NULL,   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   seed = 222,   window_size = 0.1,   step_size = 0.005,   wl = 128,   ovlp = 50,   fftw = TRUE,   flim = c(1, 12),   cores = NULL,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/create_trajectory_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","text":"x object process, either data frame SAP object ... Additional arguments passed specific methods wav_dir Directory containing WAV files (default method) window_size Size sliding window seconds (default: 0.1) step_size Step size windows (default: 0.005) wl Window length spectrogram (default: 128) ovlp Overlap percentage (default: 50) fftw Logical, use FFTW (default: TRUE) flim Frequency limits (default: c(1, 12)) cores Number processing cores segment_type SAP objects: Type segments ('motifs', 'syllables', 'bouts', 'segments') data_type SAP objects: Type data analyze clusters SAP objects: Specific clusters include sample_percent SAP objects: Percentage sample balanced SAP objects: Whether balance across groups labels SAP objects: Specific labels include seed SAP objects: Random seed verbose SAP objects: Whether print progress","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_trajectory_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","text":"default method: list containing: spectrogram_matrix: Matrix spectrogram vectors sliding_windows: Data frame window information SAP objects: Updated SAP object trajectory matrix stored features slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_trajectory_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","text":"Creates trajectory matrix following steps: Generates sliding windows segment Computes spectrograms window Combines results matrix form SAP objects, additional features include: Support different segment types Optional cluster/label filtering Balanced sampling options Results storage features slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/create_trajectory_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Spectrogram Matrices for Song Trajectory Analysis — create_trajectory_matrix","text":"","code":"if (FALSE) { # \\dontrun{ # Create trajectory matrix from segments matrix <- create_trajectory_matrix(segments,                                   wav_dir = \"path/to/wavs\",                                   window_size = 0.1,                                   step_size = 0.005)  # Create trajectory matrix from SAP object sap_obj <- create_trajectory_matrix(sap_object,                                    segment_type = \"motifs\",                                    balanced = TRUE,                                    sample_percent = 80)  # Create matrix with specific clusters sap_obj <- create_trajectory_matrix(sap_object,                                    segment_type = \"syllables\",                                    clusters = c(1, 2),                                    labels = c(\"a\", \"b\")) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Templates in Song Data — detect_template","title":"Detect Templates in Song Data — detect_template","text":"Performs template matching audio files using correlation-based detection.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Templates in Song Data — detect_template","text":"","code":"detect_template(x, ...)  # Default S3 method detect_template(   x,   template,   cor.method = \"pearson\",   save_plot = FALSE,   plot_dir = NULL,   proximity_window = NULL,   ... )  # S3 method for class 'Sap' detect_template(   x,   day = NULL,   indices = NULL,   template_name,   threshold = NULL,   cores = NULL,   cor.method = \"pearson\",   save_plot = FALSE,   plot_percent = 10,   verbose = TRUE,   proximity_window = NULL,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Templates in Song Data — detect_template","text":"x object process, either file path SAP object ... Additional arguments passed specific methods template default method: template object created create_template() cor.method Correlation method (\"pearson\" \"spearman\") save_plot Whether save detection plots plot_dir default method: Directory save plots proximity_window Time window seconds filter nearby detections (NULL disable filtering). detection highest score within window retained. day SAP objects: Numeric vector days process indices SAP objects: Numeric vector indices process template_name SAP objects: Name template use threshold SAP objects: New threshold value cores SAP objects: Number cores parallel processing plot_percent SAP objects: Percentage files plot (default: 10) verbose SAP objects: Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Templates in Song Data — detect_template","text":"default method: data frame containing detection results columns: filename: Name processed file time: Time point detection score: Correlation score SAP objects: Updated SAP object detection results stored template_matches","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect Templates in Song Data — detect_template","text":"WAV files: Validates input file template Performs correlation matching Finds peaks correlation scores Optionally filters nearby detections (proximity_window set) Optionally saves detection plots SAP objects: Parallel processing support Day-specific processing Optional threshold adjustment Progress tracking reporting Selective plot generation Filtering nearby detections proximity_window specified","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":"proximity-filtering","dir":"Reference","previous_headings":"","what":"Proximity Filtering","title":"Detect Templates in Song Data — detect_template","text":"proximity_window specified, function filter detections occur within specified time window (seconds). group detections within window, one highest score kept. useful removing false positive detections.","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/detect_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Templates in Song Data — detect_template","text":"","code":"if (FALSE) { # \\dontrun{ # Detect template in single WAV file detections <- detect_template(\"path/to/song.wav\",                              template = template_obj,                              save_plot = TRUE)  # Detect template in SAP object sap_obj <- detect_template(sap_object,                           template_name = \"template1\",                           day = c(30, 40),                           threshold = 0.7,                           cores = 4)  # Process specific indices with plots sap_obj <- detect_template(sap_object,                           template_name = \"template1\",                           indices = 1:10,                           save_plot = TRUE)  # Filter nearby detections within 0.5 seconds sap_obj <- detect_template(sap_object,                           template_name = \"template1\",                           proximity_window = 0.5) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/ensure_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure required packages are available, auto-installing if needed — ensure_pkgs","title":"Ensure required packages are available, auto-installing if needed — ensure_pkgs","text":"Ensure required packages available, auto-installing needed","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/ensure_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure required packages are available, auto-installing if needed — ensure_pkgs","text":"","code":"ensure_pkgs(...)"},{"path":"https://lxiao06.github.io/ASAP/reference/ensure_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure required packages are available, auto-installing if needed — ensure_pkgs","text":"... Character names required packages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/ensure_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure required packages are available, auto-installing if needed — ensure_pkgs","text":"Nothing, called side effects","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/extract_single_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract spectrogram for a single audio segment — extract_single_spec","title":"Extract spectrogram for a single audio segment — extract_single_spec","text":"Extract spectrogram single audio segment","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/extract_single_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract spectrogram for a single audio segment — extract_single_spec","text":"","code":"extract_single_spec(x, wav_dir, wl, ovlp, wn, fftw, freq_range, ...)"},{"path":"https://lxiao06.github.io/ASAP/reference/extract_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract and pad spectrograms from audio segments — extract_spec","title":"Extract and pad spectrograms from audio segments — extract_spec","text":"Extract pad spectrograms audio segments Default method extract_spec","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/extract_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract and pad spectrograms from audio segments — extract_spec","text":"","code":"extract_spec(x, ...)  # Default S3 method extract_spec(   x,   wav_dir = NULL,   cores = NULL,   wl = 256,   ovlp = 20,   wn = \"hanning\",   freq_range = c(1, 10),   fftw = TRUE,   ... )  # S3 method for class 'Sap' extract_spec(   x,   segment_type = c(\"segments\", \"syllables\"),   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   seed = 222,   cores = NULL,   wl = 256,   ovlp = 20,   wn = \"hanning\",   freq_range = c(1, 10),   fftw = TRUE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/extract_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract and pad spectrograms from audio segments — extract_spec","text":"x Data frame audio segment information SAP object ... Additional parameters passed spectro wav_dir Directory containing WAV files (default: NULL) cores Number CPU cores use parallel processing (default: NULL, uses available cores - 1) wl Window length spectrogram analysis (default: 256 ) Time resolution: wl/sampling rate per window Frequency resolution: sampling rate/wl Hz per bin ovlp Overlap percentage windows (default: 20 ) wn Window function name (default: \"hanning\") freq_range Frequency range analyze kHz (default: c(1,10) ) fftw Logical, use FFTW (default: TRUE) segment_type Type segments process: \"segments\" \"syllables\" (default: \"segments\") sample_percent Percentage segments sample (default: NULL) balanced Whether balance samples across labels (default: FALSE) labels Specific labels include (default: NULL) seed Random seed reproducible sampling (default: 222) verbose Whether display progress messages (default: TRUE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/extract_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract and pad spectrograms from audio segments — extract_spec","text":"default method: data frame original metadata flattened, padded spectrograms SAP method: updated SAP object spectrograms added features","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/fast_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast PCA Using IRLBA — fast_pca","title":"Fast PCA Using IRLBA — fast_pca","text":"Internal function fast PCA using truncated SVD.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/fast_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast PCA Using IRLBA — fast_pca","text":"","code":"fast_pca(matrix, n_components = 50, center = TRUE, scale = TRUE)"},{"path":"https://lxiao06.github.io/ASAP/reference/fast_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast PCA Using IRLBA — fast_pca","text":"matrix Input matrix n_components Number components center Whether center data scale Whether scale data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/filter_short_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter Short Segments from Template — filter_short_segments","title":"Filter Short Segments from Template — filter_short_segments","text":"Filter Short Segments Template","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/filter_short_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter Short Segments from Template — filter_short_segments","text":"","code":"filter_short_segments(template, min_samples)"},{"path":"https://lxiao06.github.io/ASAP/reference/filter_short_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter Short Segments from Template — filter_short_segments","text":"template Logical vector representing template min_samples Minimum number samples valid segment","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/filter_short_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter Short Segments from Template — filter_short_segments","text":"Logical vector short segments removed","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_bout.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect Song Bouts in Audio Recordings — find_bout","title":"Detect Song Bouts in Audio Recordings — find_bout","text":"Detects analyzes song bouts using RMS amplitude thresholding bandpass filtering.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_bout.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect Song Bouts in Audio Recordings — find_bout","text":"","code":"find_bout(x, ...)  # Default S3 method find_bout(   x,   wl = 1024,   ovlp = 50,   norm_method = c(\"quantile\", \"max\"),   rms_threshold = 0.1,   min_duration = 0.5,   gap_duration = 0.3,   edge_window = 0.05,   freq_range = c(3, 5),   plot = TRUE,   save_plot = FALSE,   plot_dir = NULL,   ... )  # S3 method for class 'Sap' find_bout(   x,   day = NULL,   indices = NULL,   segment_type = \"motifs\",   cores = NULL,   save_plot = FALSE,   plot_percent = 10,   wl = 1024,   ovlp = 50,   norm_method = c(\"quantile\", \"max\"),   rms_threshold = 0.1,   min_duration = 0.5,   gap_duration = 0.3,   edge_window = 0.05,   freq_range = c(3, 5),   summary = FALSE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/find_bout.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect Song Bouts in Audio Recordings — find_bout","text":"x object analyze, either file path SAP object ... Additional arguments passed specific methods wl Window length RMS calculation (default: 1024) ovlp Overlap percentage windows (default: 50) norm_method Method normalizing RMS values (\"quantile\" \"max\") rms_threshold Threshold bout detection (default: 0.1) min_duration Minimum bout duration seconds (default: 0.5) gap_duration Minimum gap bouts (default: 0.3) edge_window Time window edge effects (default: 0.05) freq_range Frequency range bandpass filter (default: c(3, 5)) plot Whether display visualization (default: TRUE) save_plot Whether save plots file (default: FALSE) plot_dir Directory saving plots day SAP objects: Days process indices SAP objects: Specific indices process segment_type SAP objects: Type segments (default: \"motifs\") cores SAP objects: Number processing cores plot_percent SAP objects: Percentage files plot (default: 10) summary SAP objects: Include additional statistics (default: FALSE) verbose SAP objects: Print progress messages (default: TRUE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_bout.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect Song Bouts in Audio Recordings — find_bout","text":"default method: Data frame containing: filename: Name WAV file selec: Bout number start_time: Onset time end_time: Offset time SAP objects: Updated object bout information bouts slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_bout.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Detect Song Bouts in Audio Recordings — find_bout","text":"WAV files: Applies bandpass filtering focus vocalization frequencies Calculates RMS envelope specified window parameters Detects bouts using adaptive thresholding Handles edge cases minimum duration constraints Creates optional visualizations SAP objects: Processes multiple recordings parallel Validates bouts existing motif detections Provides optional summary statistics Maintains metadata relationships Supports selective plotting summary = TRUE SAP objects motifs: n_motifs: Count motifs per bout align_time: First motif time alignment bout_number_day: Sequential numbering bout_gap: Time previous bout","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/find_bout.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect Song Bouts in Audio Recordings — find_bout","text":"","code":"if (FALSE) { # \\dontrun{ # Basic bout detection from file bouts <- find_bout(\"song.wav\",                    rms_threshold = 0.1,                    min_duration = 0.7)  # Custom parameters with visualization bouts <- find_bout(\"song.wav\",                    freq_range = c(2, 8),                    plot = TRUE,                    save_plot = TRUE)  # Process SAP object with summary sap_obj <- find_bout(sap_object,                      segment_type = \"motifs\",                      day = c(30, 40),                      summary = TRUE)  # Process specific files with plots sap_obj <- find_bout(sap_object,                      indices = 1:5,                      save_plot = TRUE,                      cores = 4) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/find_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Clusters in Feature Data — find_clusters","title":"Find Clusters in Feature Data — find_clusters","text":"Performs cluster analysis feature data using shared nearest neighbor (SNN) clustering. Internal functions adapted Seurat package neighbor finding cluster analysis. functions modified versions original Seurat code.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Clusters in Feature Data — find_clusters","text":"","code":"find_clusters(x, ...)  # Default S3 method find_clusters(   x,   metadata_cols,   k.param = 20,   prune.SNN = 1/15,   n.pcs = 20,   resolution = 0.2,   n.start = 10,   verbose = TRUE,   ... )  # S3 method for class 'Sap' find_clusters(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   data_type = c(\"spectral_feature\", \"spectrogram\"),   label = NULL,   k.param = 20,   prune.SNN = 1/15,   n.pcs = NULL,   resolution = NULL,   n.start = 10,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/find_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Clusters in Feature Data — find_clusters","text":"x object analyze, either data frame SAP object ... Additional arguments passed specific methods metadata_cols default method: Column indices metadata k.param Number nearest neighbors (default: 20) prune.SNN Pruning threshold SNN graph (default: 1/15) n.pcs Number principal components use resolution Resolution parameter clustering n.start Number random starts (default: 10) verbose Whether print progress messages (default: TRUE) segment_type SAP objects: Type segments ('motifs', 'syllables', 'segments') data_type SAP objects: Type feature data ('spectral_feature', \"spectrogram\") label SAP objects: Specific label filter data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Clusters in Feature Data — find_clusters","text":"default method: Data frame metadata columns cluster assignments SAP objects: Updated object clustering results features slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Clusters in Feature Data — find_clusters","text":"feature data frames: Separates metadata feature columns Finds nearest neighbors using PCA Constructs SNN graph Performs community detection SAP objects: Supports multiple segment types Optional label filtering Stores results features slot Updates feature embeddings clustering approach similar used Seurat V3, implementing: PCA-based neighbor finding SNN graph construction Louvain community detection Original source: Seurat package (https://github.com/satijalab/seurat/blob/main/inst/CITATION) functions based methods developed following publications: Hao Y, et al. (2023). Dictionary learning integrative, multimodal scalable single-cell analysis. Nature Biotechnology. doi:10.1038/s41587-023-01767-y Hao Y, Hao S, et al. (2021). Integrated analysis multimodal single-cell data. Cell. doi:10.1016/j.cell.2021.04.048 Stuart T, Butler , et al. (2019). Comprehensive Integration Single-Cell Data. Cell. doi:10.1016/j.cell.2019.05.031 Butler , et al. (2018). Integrating single-cell transcriptomic data across different conditions, technologies, species. Nature Biotechnology. doi:10.1038/nbt.4096 Satija R, et al. (2015). Spatial reconstruction single-cell gene expression data. Nature Biotechnology. doi:10.1038/nbt.3192","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/find_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Clusters in Feature Data — find_clusters","text":"","code":"if (FALSE) { # \\dontrun{ # Basic clustering of feature data clusters <- find_clusters(features,                          metadata_cols = c(1:5))  # Clustering with custom parameters clusters <- find_clusters(features,                          metadata_cols = c(1:5),                          k.param = 30,                          resolution = 0.3)  # Cluster SAP object features sap_obj <- find_clusters(sap_object,                         segment_type = \"motifs\",                         data_type = \"spectral_feature\")  # Label-specific clustering sap_obj <- find_clusters(sap_object,                         segment_type = \"syllables\",                         label = \"a\",                         resolution = 0.4) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/find_continuous_regions.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Continuous Regions — find_continuous_regions","title":"Find Continuous Regions — find_continuous_regions","text":"Internal function identify continuous regions binary signal.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_continuous_regions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Continuous Regions — find_continuous_regions","text":"","code":"find_continuous_regions(signal)"},{"path":"https://lxiao06.github.io/ASAP/reference/find_continuous_regions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Continuous Regions — find_continuous_regions","text":"signal Binary signal vector","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_continuous_regions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Continuous Regions — find_continuous_regions","text":"Matrix start end indices","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_continuous_regions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Continuous Regions — find_continuous_regions","text":"Processes binary signal : Find transitions states Identify continuous regions Handle edge cases","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_motif.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Motifs in Song Data — find_motif","title":"Find Motifs in Song Data — find_motif","text":"Identifies extracts motifs song recordings based detection times.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_motif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Motifs in Song Data — find_motif","text":"","code":"find_motif(x, ...)  # Default S3 method find_motif(   x,   pre_time = NULL,   lag_time = NULL,   wav_dir = NULL,   add_path_attr = TRUE,   verbose = TRUE,   ... )  # S3 method for class 'Sap' find_motif(   x,   template_name,   pre_time = NULL,   lag_time = NULL,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/find_motif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Motifs in Song Data — find_motif","text":"x object process, either data frame SAP object ... Additional arguments passed specific methods pre_time Time seconds detection point lag_time Time seconds detection point wav_dir default method: Directory containing WAV files add_path_attr default method: Add wav_dir attribute (default: TRUE) verbose Whether print processing information (default: TRUE) template_name SAP objects: Name template process","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_motif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Motifs in Song Data — find_motif","text":"default method: Data frame containing: filename: Source WAV file name detection_time: Original detection time start_time, end_time: Motif boundaries duration: Motif duration SAP objects: Updated object motifs stored motifs slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_motif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find Motifs in Song Data — find_motif","text":"detection data frames: Requires columns: filename, time Validates motif boundaries audio duration Processes unique audio file Returns combined results metadata SAP objects: Processes template-based detections Organizes results recording day Validates motif boundaries Updates object extracted motifs","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/find_motif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Motifs in Song Data — find_motif","text":"","code":"if (FALSE) { # \\dontrun{ # Find motifs from detection data frame motifs <- find_motif(detections,                      pre_time = 0.1,                      lag_time = 0.2,                      wav_dir = \"path/to/wavs\")  # Process with path attribute motifs <- find_motif(detections,                      pre_time = 0.1,                      lag_time = 0.2,                      wav_dir = \"path/to/wavs\",                      add_path_attr = TRUE)  # Find motifs in SAP object sap_obj <- find_motif(sap_object,                       template_name = \"template1\",                       pre_time = 0.7,                       lag_time = 0.5)  # Process with custom timing sap_obj <- find_motif(sap_object,                       template_name = \"template2\",                       pre_time = 0.5,                       lag_time = 0.3,                       verbose = TRUE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Clusters Using Modularity Optimization — find_segment_clusters","title":"Find Clusters Using Modularity Optimization — find_segment_clusters","text":"Internal function perform cluster detection.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Clusters Using Modularity Optimization — find_segment_clusters","text":"","code":"find_segment_clusters(   neighbor_graphs,   modularity.fxn = 1,   resolution = 0.8,   algorithm = 1,   n.start = 10,   n.iter = 10,   random.seed = 0,   group.singletons = TRUE,   verbose = TRUE )"},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Clusters Using Modularity Optimization — find_segment_clusters","text":"neighbor_graphs List neighbor graphs modularity.fxn Modularity function type resolution Resolution parameter algorithm Clustering algorithm n.start Number random starts n.iter Maximum iterations random.seed Random seed group.singletons Whether group singleton clusters verbose Print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Clusters Using Modularity Optimization — find_segment_clusters","text":"Data frame cluster assignments","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_neighbors.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Nearest Neighbors for Segments — find_segment_neighbors","title":"Find Nearest Neighbors for Segments — find_segment_neighbors","text":"Internal function compute nearest neighbors SNN graph.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_neighbors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Nearest Neighbors for Segments — find_segment_neighbors","text":"","code":"find_segment_neighbors(   segments_data,   k.param = 20,   prune.SNN = 1/15,   compute.SNN = TRUE,   n.pcs = 10 )"},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_neighbors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Nearest Neighbors for Segments — find_segment_neighbors","text":"segments_data Matrix data frame segment features k.param Number nearest neighbors prune.SNN SNN pruning threshold compute.SNN Whether compute SNN graph n.pcs Number PCs use","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/find_segment_neighbors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Nearest Neighbors for Segments — find_segment_neighbors","text":"List containing neighbor graphs","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/goodness.html","id":null,"dir":"Reference","previous_headings":"","what":"Pitch Goodness Analysis — goodness","title":"Pitch Goodness Analysis — goodness","text":"Calculates visualizes pitch goodness audio segments using cepstral analysis. Supports single WAV file analysis, batch processing, multiple visualization options.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/goodness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pitch Goodness Analysis — goodness","text":"","code":"goodness(x, ...)  # Default S3 method goodness(   x,   start_time = NULL,   end_time = NULL,   wl = 512,   ovlp = 50,   fmax = 1500,   plot = TRUE,   ... )  # S3 method for class 'data.frame' goodness(   x,   wav_dir = NULL,   wl = 512,   ovlp = 50,   fmax = 1500,   plot = TRUE,   plot_lim = NULL,   color_palette = NULL,   n_colors = 500,   cores = NULL,   ... )  # S3 method for class 'Sap' goodness(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   clusters = NULL,   cores = NULL,   seed = 222,   wl = 512,   ovlp = 50,   fmax = 1500,   plot = TRUE,   plot_lim = NULL,   color_palette = NULL,   n_colors = 500,   ordered = FALSE,   descending = TRUE,   verbose = TRUE,   ... )  # S3 method for class 'matrix' goodness(   x,   labels = NULL,   plot_lim = NULL,   color_palette = NULL,   n_colors = 500,   main = \"Pitch Goodness Heatmap\",   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/goodness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pitch Goodness Analysis — goodness","text":"x Input object: character: path WAV file (default method) data frame: containing segment information SAP object Pre-computed goodness matrix ... Additional arguments passed methods plotting functions start_time Numeric, start time seconds (default method) end_time Numeric, end time seconds (default method) wl Window length spectral analysis (default: 512) ovlp Overlap percentage windows (default: 50) fmax Maximum frequency consider (default: 1500 Hz) plot Logical, whether generate visualization (default: TRUE) wav_dir Directory containing WAV files (data frame methods) plot_lim Optional vector length 2 specifying goodness limits plotting color_palette Function generating color palette (default: black--white spectrum) n_colors Number colors heatmap (default: 500) cores Number cores parallel processing segment_type SAP objects: Type segments (currently 'motifs') sample_percent SAP objects: Percentage segments sample balanced SAP objects: Whether balance samples across labels labels Optional vector labels subsetting grouping clusters SAP objects: Numeric vector cluster IDs include seed Random seed sampling (default: 222) ordered SAP objects: Whether order feature embeddings descending SAP objects: Direction embedding-based ordering verbose Logical, whether print progress messages(default: TRUE) main Plot title (matrix method)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/goodness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pitch Goodness Analysis — goodness","text":"Depending method used: Default method (WAV file): Matrix columns: time, goodness Data frame method: List components: goodness_matrix, reference_time, original_times, plot (plot=TRUE) SAP method: SAP object Updated goodness features Matrix method: Lattice plot (invisibly)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/goodness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pitch Goodness Analysis — goodness","text":"function provides different methods depending input type: Default method (WAV file): Analyzes single WAV file within specified time window Uses cepstral analysis pitch goodness calculation Creates spectrogram goodness overlay visualization Data frame method: Processes multiple segments parallel Supports batch processing Provides heatmap visualization multiple segments SAP object method: Integrates SAP feature analysis pipeline Supports segment filtering ordering Stores results features component Matrix method: Visualizes pre-computed F0 data Supports label-based organization Adds visual separators groups SAP object method: Integrates SAP feature analysis pipeline Supports segment filtering ordering Stores results features component Matrix method: Visualizes pre-computed pitch goodness data Supports label-based organization Adds visual separators groups pitch goodness measure: Based cepstral peak prominence Higher values indicate stronger pitch periodicity Computed across time windows Normalized comparison across segments","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/goodness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pitch Goodness Analysis — goodness","text":"","code":"if (FALSE) { # \\dontrun{ # Single WAV file analysis goodness(\"path/to/sound.wav\", start_time = 1, end_time = 2)  # Multiple segment analysis goodness(segments_df, wav_dir = \"path/to/wavs\",          plot = TRUE, plot_lim = c(0, 1))  # SAP object analysis goodness(sap_obj, ordered = TRUE, balanced = TRUE,    sample_percent = 80, seed = 123)  # Direct matrix visualization goodness(goodness_matrix, labels = c(\"a\", \"b\", \"c\"),    main = \"Custom Title\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual Syllable Labeling for Bird Song Analysis — manual_label","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"Provides interactive map-based assignment alphabetic labels automatically clustered syllables. Supports interactive console input predefined label maps, persistent storage label assignments.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"","code":"manual_label(   x,   data_type = c(\"segment\", \"syllable\"),   label_map = NULL,   interactive = FALSE,   verbose = TRUE )"},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"x Sap object containing bird song analysis data data_type Type data label: \"segment\" \"syllable\" label_map Optional data frame non-interactive labeling columns: cluster: numeric cluster IDs syllable: corresponding letter labels (-z) interactive Logical; force interactive mode even label_map exists verbose Logical; print progress messages summaries","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"Returns modified Sap object : Updated syllable labels x$syllables Stored label map feature embeddings attributes labels converted lowercase","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"function provides two main methods syllable labeling: Interactive Console Mode: Prompts letter input cluster Validates input (single letters -z ) Allows quitting mid-process ('q') Automatically stores label map future use Label Map Mode: Uses predefined mapping clusters letters Validates completeness format mapping Updates stored label map Label Storage Retrieval: Label maps stored Sap object attributes Automatically retrieved subsequent runs Can overridden new map interactive session Accessible via attr(x$features$<data_type>$feat.embeds, \"label_map\")","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"label-map-format","dir":"Reference","previous_headings":"","what":"Label Map Format","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"label_map data frame must :","code":"data.frame(   cluster = numeric_vector,  # Cluster IDs from auto_label   syllable = character_vector  # Single letters a-z )"},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"tips-for-interactive-labeling","dir":"Reference","previous_headings":"","what":"Tips for Interactive Labeling","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"View clusters first using plot_cluster(..., label_type = \"pre\") Consider similar acoustic features assigning letter Use 'q' exit without saving mistakes made Review label summary completion Store label_map externally reproducibility","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"common-workflows","dir":"Reference","previous_headings":"","what":"Common Workflows","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"First-time labeling:   Using stored labels:   Updating labels:","code":"sap <- auto_label(sap)  # Generate clusters sap <- manual_label(sap, data_type = \"syllable\")  # Label interactively sap <- manual_label(sap, data_type = \"syllable\")  # Uses stored map # Extract and modify existing map map <- attr(sap$features$syllable$feat.embeds, \"label_map\") map$syllable[map$cluster == 3] <- \"d\"  # Change cluster 3 to 'd' sap <- manual_label(sap, data_type = \"syllable\", label_map = map)"},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/manual_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manual Syllable Labeling for Bird Song Analysis — manual_label","text":"","code":"if (FALSE) { # \\dontrun{ # Interactive labeling (first time) sap <- manual_label(sap, data_type = \"syllable\")  # Using stored labels (subsequent runs) sap <- manual_label(sap, data_type = \"syllable\")  # Force new interactive session sap <- manual_label(sap,                    data_type = \"syllable\",                    interactive = TRUE)  # Using predefined label map label_map <- data.frame(   cluster = 1:5,   syllable = c(\"a\", \"b\", \"b\", \"c\", \"a\") ) sap <- manual_label(sap,                    data_type = \"syllable\",                    label_map = label_map)  # Access stored label map stored_map <- attr(sap$features$syllable$feat.embeds, \"label_map\") print(stored_map)  # Typical workflow: # 1. Run automatic clustering sap <- auto_label(sap)  # 2. View clusters plot_cluster(sap,             data_type = \"syllable\",             label_type = \"pre\")  # 3. Manually label clusters sap <- manual_label(sap, data_type = \"syllable\")  # 4. View syllable labels plot_cluster(sap,             data_type = \"syllable\",             label_type = \"post\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/merge_similar_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge Similar Clusters Based on UMAP Proximity — merge_similar_clusters","title":"Merge Similar Clusters Based on UMAP Proximity — merge_similar_clusters","text":"Internal function merge clusters close UMAP space.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/merge_similar_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge Similar Clusters Based on UMAP Proximity — merge_similar_clusters","text":"","code":"merge_similar_clusters(data, umap_threshold = NULL)"},{"path":"https://lxiao06.github.io/ASAP/reference/merge_similar_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge Similar Clusters Based on UMAP Proximity — merge_similar_clusters","text":"data Data frame containing cluster information umap_threshold Distance threshold merging clusters","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/merge_similar_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge Similar Clusters Based on UMAP Proximity — merge_similar_clusters","text":"Data frame merged cluster assignments","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_sap.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","title":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","text":"internal constructor function creating new SAP object predefined default components structure.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_sap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","text":"","code":"new_sap(   metadata = data.frame(),   base_path = character(),   templates = new_template_collection(),   motifs = new_segment(),   bouts = new_segment(),   syllables = new_segment(),   segments = new_segment(),   features = list(motif = list(), bout = list(), syllable = list(), segment = list()),   misc = list(),   version = \"1.0.1\" )"},{"path":"https://lxiao06.github.io/ASAP/reference/new_sap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","text":"metadata data frame containing file recording metadata (default empty data frame) base_path character string representing base directory path (default empty character vector) templates template_collection object storing analysis templates (default new empty template collection) motifs segment object motif-level analysis (default new empty segment object) bouts segment object bout-level analysis (default new empty segment object) syllables segment object syllable-level analysis (default new empty segment object) segments segment object general segment analysis (default new empty segment object) features list containing feature categories different analysis levels (default empty list predefined categories) misc list storing miscellaneous information (default empty list) version character string representing SAP object version (default \"1.0.1\")","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_sap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","text":"SAP object class \"Sap\" specified components","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_sap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","text":"internal constructor function used create standardized SAP object. ensures SAP objects consistent structure predefined components default empty values. function creates structure following components: metadata: Information recorded files base_path: Directory path recordings motifs: Motif-level segment information bouts: Bout-level segment information syllables: Syllable-level segment information segments: General segment information templates: Collection analysis templates features: Feature lists different analysis levels misc: Miscellaneous metadata information version: Package version","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_sap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Internal Constructor for Sound Analysis Pro (SAP) Object — new_sap","text":"internal function intended called directly users. used within package creating SAP objects.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Constructor for Segment Object — new_segment","title":"Internal Constructor for Segment Object — new_segment","text":"internal constructor function creating segment object standardized structure storing acoustic segment information.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Constructor for Segment Object — new_segment","text":"","code":"new_segment(x = data.frame())"},{"path":"https://lxiao06.github.io/ASAP/reference/new_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Constructor for Segment Object — new_segment","text":"x data frame containing segment information (default empty data frame)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Constructor for Segment Object — new_segment","text":"segment object class \"segment\" specified segment information","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_segment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Constructor for Segment Object — new_segment","text":"Creates segment object predefined structure. data frame provided, initializes empty segment following columns: filename: Name source audio file day_post_hatch: Numeric day post-hatch label: Categorical label segment start_time: Numeric start time segment end_time: Numeric end time segment duration: Numeric duration segment data frame provided, function: Validates presence required columns Converts columns appropriate data types Calculates segment duration provided","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_segment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Internal Constructor for Segment Object — new_segment","text":"internal function intended called directly users. used within package creating segment objects.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_template_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Constructor for Template Collection — new_template_collection","title":"Internal Constructor for Template Collection — new_template_collection","text":"internal constructor function creating new template collection standardized structure storing managing sound analysis templates.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_template_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Constructor for Template Collection — new_template_collection","text":"","code":"new_template_collection()"},{"path":"https://lxiao06.github.io/ASAP/reference/new_template_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Constructor for Template Collection — new_template_collection","text":"template_collection object empty structured template collection","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_template_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Constructor for Template Collection — new_template_collection","text":"Creates template collection object three key components: template_info: data frame containing metadata templates template_list: list store corTemplate objects template_matches: list store template detection results template_info data frame includes following columns: template_name: Name template start_time: Start time template end_time: End time template duration: Duration template freq_min: Minimum frequency freq_max: Maximum frequency threshold: Detection threshold clip_name: Name audio clip clip_path: Path audio clip source_file: Original source file name source_file_path: Path source file creation_date: Date time template creation","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/new_template_collection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Internal Constructor for Template Collection — new_template_collection","text":"internal function intended called directly users. used within package creating template collections.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/normalize_spec.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Spectrogram — normalize_spec","title":"Normalize Spectrogram — normalize_spec","text":"Internal function normalize spectrogram using different methods.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/normalize_spec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Spectrogram — normalize_spec","text":"","code":"normalize_spec(spec, max_level_db = NULL, ref_level_db = NULL, method = \"db\")"},{"path":"https://lxiao06.github.io/ASAP/reference/normalize_spec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Spectrogram — normalize_spec","text":"spec Input spectrogram matrix max_level_db Maximum threshold level ref_level_db Reference level method Normalization method","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/normalize_spec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Spectrogram — normalize_spec","text":"Normalized spectrogram matrix","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/normalize_spec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Spectrogram — normalize_spec","text":"Supports multiple normalization methods: db: dB-scale normalization minmax: Min-max scaling zscore: Z-score normalization","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pad_amp_env.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad Amplitude Envelope for Alignment — pad_amp_env","title":"Pad Amplitude Envelope for Alignment — pad_amp_env","text":"Internal function pad align amplitude envelopes bout analysis.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pad_amp_env.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad Amplitude Envelope for Alignment — pad_amp_env","text":"","code":"pad_amp_env(   segment_row,   wav_dir = NULL,   msmooth = NULL,   max_pre_window = NULL,   max_post_window = NULL,   samples_per_second = NULL,   pad_value = 0,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/pad_amp_env.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad Amplitude Envelope for Alignment — pad_amp_env","text":"segment_row Single row segment data wav_dir Directory containing WAV files msmooth Smoothing parameters max_pre_window Maximum pre-window time max_post_window Maximum post-window time samples_per_second Sampling rate pad_value Value use padding ... Additional arguments","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pad_amp_env.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad Amplitude Envelope for Alignment — pad_amp_env","text":"Padded aligned amplitude envelope vector","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pad_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Pad an array with zeros to match the target length — pad_array","title":"Pad an array with zeros to match the target length — pad_array","text":"Pad array zeros match target length","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pad_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pad an array with zeros to match the target length — pad_array","text":"","code":"pad_array(arr, target_length)"},{"path":"https://lxiao06.github.io/ASAP/reference/pad_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pad an array with zeros to match the target length — pad_array","text":"arr Array pad target_length Target length padding","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pad_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pad an array with zeros to match the target length — pad_array","text":"Padded array","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/parallel_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"parallel processing function — parallel_apply","title":"parallel processing function — parallel_apply","text":"parallel processing function","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/parallel_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"parallel processing function — parallel_apply","text":"","code":"parallel_apply(indices, FUN, cores)"},{"path":"https://lxiao06.github.io/ASAP/reference/parallel_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel PCA Implementation — parallel_pca","title":"Parallel PCA Implementation — parallel_pca","text":"Internal function parallel PCA computation.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/parallel_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel PCA Implementation — parallel_pca","text":"","code":"parallel_pca(x, n_components = 50, n_cores = NULL, scale = TRUE)"},{"path":"https://lxiao06.github.io/ASAP/reference/parallel_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel PCA Implementation — parallel_pca","text":"x Input matrix n_components Number components n_cores Number cores scale Whether scale data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/parse_filename.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse filename for SAP metadata — parse_filename","title":"Parse filename for SAP metadata — parse_filename","text":"Internal function parse WAV filenames extract metadata components.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/parse_filename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse filename for SAP metadata — parse_filename","text":"","code":"parse_filename(filename)"},{"path":"https://lxiao06.github.io/ASAP/reference/parse_filename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse filename for SAP metadata — parse_filename","text":"filename Character string filename parse","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/parse_filename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse filename for SAP metadata — parse_filename","text":"list containing parsed components: bird_id Extracted bird identifier recording_date Parsed recording date recording_time Parsed recording time","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pitch_goodness.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for processing single-row fundamental frequency estimation — pitch_goodness","title":"Internal function for processing single-row fundamental frequency estimation — pitch_goodness","text":"Internal function processing single-row fundamental frequency estimation","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/pitch_goodness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for processing single-row fundamental frequency estimation — pitch_goodness","text":"","code":"pitch_goodness(   segment_row,   wav_dir = NULL,   wl = 512,   ovlp = 80,   fmax = 1500,   plot = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_bout_detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Bout Detection Results — plot_bout_detection","title":"Plot Bout Detection Results — plot_bout_detection","text":"Creates two-panel plot showing RMS envelope spectrogram bout boundaries.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_bout_detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Bout Detection Results — plot_bout_detection","text":"","code":"plot_bout_detection(   wav_file,   time_points,   rms_env,   rms_threshold,   bout_df,   bout_onsets,   bout_offsets,   wl,   ovlp )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_bout_detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Bout Detection Results — plot_bout_detection","text":"rms_threshold Threshold bout detection (default: 0.1) wl Window length RMS calculation (default: 1024) ovlp Overlap percentage windows (default: 50)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_clusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Clusters in Time Series Data — plot_clusters","title":"Plot Clusters in Time Series Data — plot_clusters","text":"Generic function plotting clusters time series data, primarily designed visualizing bird song syllable clusters manual labels. Supports numeric cluster IDs (pre manual labeling) alphabetic syllable labels (post manual labeling).","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_clusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Clusters in Time Series Data — plot_clusters","text":"","code":"plot_clusters(x, ...)  # S3 method for class 'matrix' plot_clusters(x, labels = NULL, cluster_colors = NULL, main = NULL, ...)  # S3 method for class 'Sap' plot_clusters(   x,   data_type = c(\"segment\", \"syllable\"),   label_type = c(\"pre\", \"post\"),   time_resolution = 1000,   cluster_colors = NULL,   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   motif_clusters = NULL,   ordered = FALSE,   descending = TRUE,   seed = 222,   cores = NULL,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_clusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Clusters in Time Series Data — plot_clusters","text":"x Object plot clusters . Can either: matrix cluster/syllable data Sap object containing bird song analysis data motif syllable levels ... Additional arguments passed methods labels Optional vector experimental condition labels subset (e.g., \"BL\", \"Post\", \"Rec\") cluster_colors Optional named vector colors clusters main Plot title (matrix method) data_type Type data analyze (Sap objects): \"segment\": Uses segment-level features clusters \"syllable\": Uses syllable-level features clusters label_type Type labels visualize (Sap objects): \"pre\": Shows numerical cluster IDs automatic clustering \"post\": Shows alphabetic syllable labels assigned via manual_label() time_resolution Number time points plotting (default: 1000) sample_percent Optional percentage data sample balanced Whether balance samples across labels motif_clusters Optional vector specific clusters include ordered Whether order motifs UMAP coordinates descending Direction UMAP-based ordering seed Random seed reproducibility cores Number cores parallel processing verbose Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_clusters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Clusters in Time Series Data — plot_clusters","text":"Invisibly returns x","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_clusters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Clusters in Time Series Data — plot_clusters","text":"function provides two main visualization approaches: Pre-labeling visualization (label_type = \"pre\"): Shows numerical cluster IDs automatic clustering Uses data x$features$segment/syllable$feat.embeds Clusters represented numbers (1, 2, 3, etc.) Useful evaluating automatic clustering results Post-labeling visualization (label_type = \"post\"): Shows alphabetic syllable labels manual annotation Uses data x$syllables (created manual_label()) Syllables represented letters (, b, c, etc.) Useful viewing manual syllable classifications matrix input: Must column names labels Requires 'time_window' attribute Can contain either numeric clusters character syllable labels Sap objects: data_type determines feature level analysis: \"segment\": Fine-grained analysis song segments \"syllable\": Analysis syllable level Supports experimental condition labels (BL, Post, Rec) Can order motifs UMAP coordinates pattern visualization Allows balanced sampling across conditions","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/plot_clusters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Clusters in Time Series Data — plot_clusters","text":"","code":"if (FALSE) { # \\dontrun{ # Matrix method example mat <- matrix(sample(1:5, 1000, replace = TRUE), ncol = 10) attr(mat, \"time_window\") <- 1.2 colnames(mat) <- rep(c(\"BL\", \"Post\"), each = 5) plot_clusters(mat)  # Sap object - Pre-labeling (numerical clusters) # Basic cluster visualization plot_clusters(sap,             data_type = \"syllable\",             label_type = \"pre\")  # Ordered by UMAP with specific conditions plot_clusters(sap,             data_type = \"syllable\",             label_type = \"pre\",             ordered = TRUE,             labels = c(\"BL\", \"Post\"))  # Sap object - Post-labeling (syllable letters) # After running manual_label() plot_clusters(sap,             data_type = \"syllable\",             label_type = \"post\")  # Balanced sampling across conditions plot_clusters(sap,             data_type = \"syllable\",             label_type = \"post\",             balanced = TRUE,             labels = c(\"BL\", \"Post\", \"Rec\")) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Group of Segments — plot_group","title":"Plot Group of Segments — plot_group","text":"internal helper function plot spectrograms group segments.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Group of Segments — plot_group","text":"","code":"plot_group(   segments,   base_path,   n_samples,   fft_window_size,   overlap,   dark_mode,   legend,   by_column,   label,   cluster = NULL )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Group of Segments — plot_group","text":"segments data frame segment information base_path Base directory path audio files n_samples Number samples plot fft_window_size Size FFT window overlap Overlap windows dark_mode Use dark theme legend Show spectrogram legend by_column Arrange plots columns label Label group segments cluster Optional cluster identifier","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Group of Segments — plot_group","text":"Generates plot segment spectrograms side effect","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","title":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","text":"Creates heatmap visualizations amplitude envelopes audio segments, supporting multiple data sources visualization options.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","text":"","code":"plot_heatmap(x, ...)  # Default S3 method plot_heatmap(   x,   wav_dir = NULL,   msmooth = c(256, 50),   color_palette = NULL,   n_colors = 500,   contrast = 3,   ... )  # S3 method for class 'matrix' plot_heatmap(   x,   labels = NULL,   color_palette = NULL,   n_colors = 500,   contrast = 3,   main = \"Amplitude Envelope Heatmap\",   ... )  # S3 method for class 'Sap' plot_heatmap(   x,   segment_type = c(\"motifs\", \"bouts\"),   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   clusters = NULL,   cores = NULL,   seed = 222,   msmooth = c(256, 50),   color_palette = NULL,   n_colors = 500,   contrast = 3,   ordered = FALSE,   descending = TRUE,   padding_quantile = 0.9,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","text":"x object visualize (data frame, SAP object, matrix) ... Additional arguments passed specific methods wav_dir default method: Path WAV files directory msmooth Smoothing parameters c(window_length, overlap_percentage) color_palette Function generating color palette n_colors Number colors heatmap (default: 500) contrast Contrast factor visualization (default: 3) labels Optional vector labels include main matrix method: Plot title segment_type SAP objects: Type segments ('motifs', 'bouts', 'syllables', 'segments') sample_percent SAP objects: Percentage sample balanced SAP objects: Balance across labels clusters Numeric vector cluster IDs filter cores SAP objects: Number processing cores seed SAP objects: Random seed (default: 222) ordered SAP objects: Order embeddings descending SAP objects: Direction ordering padding_quantile SAP objects: Quantile bout padding (default: 0.9) verbose SAP objects: Print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","text":"default method: List containing segments, matrix, plot SAP objects: Updated object amplitude features matrices: Lattice plot object","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","text":"data frames: Requires columns: filename, start_time, end_time Calculates envelopes segment Creates matrix aligned envelopes SAP objects: Supports multiple segment types Optional balanced sampling Parallel processing support Ordering feature embeddings matrices: Direct visualization pre-computed envelopes Label-based organization Visual separation groups","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Heatmap of Amplitude Envelopes — plot_heatmap","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with data frame plot_heatmap(segments, wav_dir = \"path/to/wavs\")  # SAP object with options plot_heatmap(sap_obj,              segment_type = \"motifs\",              balanced = TRUE,              ordered = TRUE)  # Matrix with specific labels plot_heatmap(amp_matrix,              labels = c(\"a\", \"b\"),              contrast = 2)  # Advanced SAP object usage plot_heatmap(sap_obj,              segment_type = \"bouts\",              sample_percent = 80,              cores = 4,              ordered = TRUE,              descending = FALSE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_motif_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","title":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","text":"Generates heatmap visualization motif boundaries optional cluster filtering UMAP-based ordering. Incorporates amplitude envelopes boundary markers precise temporal analysis.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_motif_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","text":"","code":"plot_motif_boundaries(   x,   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   clusters = NULL,   ordered = FALSE,   descending = TRUE,   cores = NULL,   seed = 222,   msmooth = c(256, 50),   color_palette = NULL,   n_colors = 500,   contrast = 3,   marginal_window = 0.1,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_motif_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","text":"x SAP object containing motifs metadata sample_percent Percentage data sample group (0-100) balanced Logical indicating whether balance group sizes labels Character vector specific labels include clusters Numeric vector cluster IDs filter ordered Logical indicating UMAP-based ordering descending Logical descending order UMAP sorting cores Number processing cores (NULL auto-detection) seed Random seed reproducibility msmooth Vector smoothing parameters amplitude envelopes color_palette Color palette function heatmap n_colors Number color gradations palette contrast Contrast adjustment color scaling marginal_window Time window extension motif margins (seconds) verbose Logical flag progress messages ... Additional parameters passed lattice::levelplot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_motif_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","text":"lattice plot object showing motif boundaries heatmap","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_motif_boundaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","text":"Key features: Integrates motif boundary data refine_motif_boundaries() Supports cluster filtering using feature embeddings Enables UMAP-based ordering motifs Visualizes boundaries colored markers (green = onset, cyan = offset) Includes automatic duration calculation marginal window extension Requires prior execution refine_motif_boundaries() boundary detection. Uses parallel processing efficient amplitude envelope calculation.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_motif_boundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Motif Boundaries in Audio Data — plot_motif_boundaries","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with default parameters plot_motif_boundaries(sap_object)  # Cluster-specific plot with custom colors plot_motif_boundaries(sap_object,                       clusters = c(1,3),                       ordered = TRUE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_single_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal UMAP Plotting Function — plot_single_umap","title":"Internal UMAP Plotting Function — plot_single_umap","text":"Internal function creating individual UMAP plots.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_single_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal UMAP Plotting Function — plot_single_umap","text":"","code":"plot_single_umap(   data,   dims = c(\"X1\", \"X2\"),   cols = NULL,   pt.size = 0.5,   stroke = 0.5,   alpha = 1,   highlight.alpha = NULL,   label = FALSE,   repel = FALSE,   label.size = 4,   highlight.by = NULL,   highlight.value = NULL,   cols.highlight = \"#DE2D26\",   sizes.highlight = 1,   background.value = NULL,   na.value = \"grey80\" )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_syllable_detection.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Syllable Detection Results — plot_syllable_detection","title":"Plot Syllable Detection Results — plot_syllable_detection","text":"Internal function create visualization syllable detection results.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_syllable_detection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Syllable Detection Results — plot_syllable_detection","text":"","code":"plot_syllable_detection(   times,   frequencies,   sp,   syllables,   max_level_db,   ref_level_db,   final_threshold,   final_envelope,   silence_threshold,   smooth = FALSE )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_syllable_detection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Syllable Detection Results — plot_syllable_detection","text":"times Time points vector frequencies Frequency points vector sp Spectrogram matrix syllables Detected syllables data frame max_level_db Maximum threshold level ref_level_db Reference level final_threshold Final detection threshold final_envelope Final detection envelope silence_threshold Silence threshold smooth Whether smooth visualization","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_syllable_detection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Syllable Detection Results — plot_syllable_detection","text":"Function creates plot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_syllable_detection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Syllable Detection Results — plot_syllable_detection","text":"Creates visualization : Spectrogram syllable boundaries Detection envelope trace Threshold indicators Optional smoothing","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Traces of Song Features — plot_traces","title":"Plot Traces of Song Features — plot_traces","text":"Creates line plot visualizations various acoustic features audio segments, including amplitude envelope, fundamental frequency, pitch goodness, Wiener entropy. function supports multiple visualization options.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Traces of Song Features — plot_traces","text":"","code":"plot_traces(x, ...)  # Default S3 method plot_traces(   x,   labels = NULL,   plot_type = c(\"combined\", \"individual\", \"average\"),   feature = c(\"env\", \"pitch\", \"goodness\", \"entropy\"),   alpha = 0.2,   ncol = 1,   palette = \"Set1\",   ... )  # S3 method for class 'Sap' plot_traces(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   feature = c(\"env\", \"pitch\", \"goodness\", \"entropy\"),   labels = NULL,   plot_type = c(\"combined\", \"individual\", \"average\"),   alpha = 0.2,   ncol = 1,   palette = \"Set1\",   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_traces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Traces of Song Features — plot_traces","text":"x object visualize (matrix SAP object) ... Additional arguments passed specific methods labels Optional vector labels include (default: NULL, uses labels) plot_type Type plot: \"individual\", \"average\", \"combined\" (default: \"combined\") feature Type feature plot: \"env\" (amplitude envelope), \"pitch\" (fundamental frequency), \"goodness\" (pitch goodness), \"entropy\" (Wiener entropy) alpha Transparency individual traces (default: 0.2) ncol Number columns facet wrapping (default: 1) palette Color palette plotting (default: \"Set1\") segment_type SAP objects: Type segments ('motifs', 'syllables', 'segments')","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_traces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Traces of Song Features — plot_traces","text":"ggplot object specified trace visualization. SAP objects, function returns input object invisibly printing plot.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_traces.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Traces of Song Features — plot_traces","text":"matrices: Requires matrix 'time_window' attribute Column names used labels Supports direct visualization pre-computed traces SAP objects: Supports multiple segment types(motifs, syllables, segments) Can plot multiple acoustic features (amplitude envelope, fundamental frequency, pitch goodness, Wiener entropy) Flexible visualization options Features: env Amplitude envelope - represents overall loudness/intensity sound time pitch Fundamental frequency (kHz) - represents pitch contour goodness Pitch goodness - represents periodicity/quality pitch estimation entropy Wiener entropy - measures width uniformity power spectrum Plot Types: individual Shows rendition's trace, faceted label average Displays mean trace standard error combined Shows individual traces mean trace","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_traces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Traces of Song Features — plot_traces","text":"","code":"if (FALSE) { # \\dontrun{ # Plot amplitude envelope traces from a matrix plot_traces(sap_obj$features$motif$amp_env,             feature = \"env\",             plot_type = \"combined\")  # Plot fundamental frequency traces from a SAP object plot_traces(sap_obj,             segment_type = \"motifs\",             feature = \"pitch\",             plot_type = \"individual\")  # Plot Wiener entropy traces plot_traces(sap_obj,             segment_type = \"syllables\",             feature = \"entropy\",             plot_type = \"average\")  # Customize visualization plot_traces(sap_obj$features$motif$amp_env,             labels = c(\"BL\", \"Post\"),             feature = \"env\",             plot_type = \"average\",             alpha = 0.1,             ncol = 2) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot UMAP Visualization — plot_umap","title":"Plot UMAP Visualization — plot_umap","text":"Creates customizable UMAP visualizations options grouping, highlighting, customization.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot UMAP Visualization — plot_umap","text":"","code":"plot_umap(x, ...)  # Default S3 method plot_umap(   x,   dims = c(\"UMAP1\", \"UMAP2\"),   subset.by = NULL,   subset.value = NULL,   group.by = NULL,   split.by = NULL,   cols = NULL,   pt.size = 0.5,   stroke = 0.5,   alpha = 0.3,   highlight.alpha = NULL,   label = FALSE,   label.size = 4,   repel = FALSE,   highlight.by = NULL,   highlight.value = NULL,   cols.highlight = \"#DE2D26\",   sizes.highlight = 1,   background.value = NULL,   na.value = \"grey80\",   ncol = NULL,   combine = TRUE,   ... )  # S3 method for class 'Sap' plot_umap(   x,   segment_type = c(\"motifs\", \"syllables\", \"bouts\", \"segments\"),   dims = c(\"UMAP1\", \"UMAP2\"),   group.by = NULL,   split.by = NULL,   subset.by = NULL,   subset.value = NULL,   cols = NULL,   pt.size = 0.5,   stroke = 0.5,   alpha = 0.3,   highlight.alpha = NULL,   label = FALSE,   label.size = 4,   repel = FALSE,   highlight.by = NULL,   highlight.value = NULL,   cols.highlight = \"#DE2D26\",   sizes.highlight = 1,   background.value = NULL,   na.value = \"grey80\",   ncol = NULL,   combine = TRUE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot UMAP Visualization — plot_umap","text":"x object visualize, either data frame UMAP coordinates SAP object ... Additional arguments passed specific methods dims UMAP dimensions plot (default: c(\"UMAP1\", \"UMAP2\")) subset.Column name subsetting data subset.value Values subset group.Column name grouping points split.Column name faceting plots cols Custom colors groups pt.size Point size (default: 0.5) stroke Point stroke width (default: 0.5) alpha Point transparency (default: 0.3) highlight.alpha Transparency highlighted points label Whether add labels (default: FALSE) label.size Size labels (default: 4) repel Whether use repelling labels (default: FALSE) highlight.Column name highlighting highlight.value Values highlight cols.highlight Colors highlighted points (default: '#DE2D26') sizes.highlight Size highlighted points (default: 1) background.value Background group value na.value Color NA values (default: 'grey80') ncol Number columns multi-plot layout combine Whether combine multiple plots (default: TRUE) segment_type SAP objects: Type segments visualize ('motifs', 'syllables', 'bouts', 'segments') verbose SAP objects: Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot UMAP Visualization — plot_umap","text":"default method: ggplot object list plots SAP objects: Updated SAP object plot side effect","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot UMAP Visualization — plot_umap","text":"function creates UMAP visualizations following features: Flexible grouping highlighting Customizable point appearance Optional labels faceting Multiple plot combinations","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot UMAP Visualization — plot_umap","text":"","code":"if (FALSE) { # \\dontrun{ # Basic UMAP plot from data frame plot_umap(umap_df, group.by = \"cluster\")  # Plot with highlighting plot_umap(umap_df,           group.by = \"cluster\",           highlight.by = \"label\",           highlight.value = \"a\")  # Plot with faceting plot_umap(umap_df,           group.by = \"cluster\",           split.by = \"day_post_hatch\")  # Plot from SAP object plot_umap(sap_obj,           segment_type = \"motifs\",           group.by = \"label\")  # SAP object plot with custom grouping and highlighting plot_umap(sap_obj,           segment_type = \"syllables\",           group.by = \"label\",           highlight.by = \"cluster\",           highlight.value = c(1, 2)) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap2.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","title":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","text":"Creates UMAP visualizations optimized trajectory analysis, support continuous color mapping overlay comparisons.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","text":"","code":"plot_umap2(x, ...)  # Default S3 method plot_umap2(   x,   dims = c(\"UMAP1\", \"UMAP2\"),   color.by = \".time\",   split.by = \"label\",   order.by = \"day_post_hatch\",   pt.size = 1.2,   alpha_range = c(0.1, 0.5),   ncol = NULL,   title = NULL,   overlay_mode = FALSE,   base_label = NULL,   compare_labels = NULL,   base_color = \"steelblue\",   compare_color = \"orangered\",   ... )  # S3 method for class 'Sap' plot_umap2(   x,   segment_type = c(\"motifs\", \"syllables\", \"bouts\", \"segments\"),   data_type = c(\"feat.embeds\", \"traj.embeds\"),   dims = c(\"UMAP1\", \"UMAP2\"),   color.by = \".time\",   split.by = \"label\",   order.by = \"day_post_hatch\",   pt.size = 1.2,   alpha_range = c(0.1, 0.5),   ncol = NULL,   title = NULL,   overlay_mode = FALSE,   base_label = NULL,   compare_labels = NULL,   base_color = \"steelblue\",   compare_color = \"orangered\",   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","text":"x object visualize, either data frame SAP object ... Additional arguments passed specific methods dims UMAP dimensions plot (default: c(\"UMAP1\", \"UMAP2\")) color.Column continuous color mapping (default: \".time\") split.Column faceting (default: \"label\") order.Column ordering facets (default: \"day_post_hatch\") pt.size Point size (default: 1.2) alpha_range Range alpha transparency (default: c(0.1, 0.5)) ncol Number columns layout title Plot title overlay_mode Whether create overlay comparisons (default: FALSE) base_label Base label overlay comparison compare_labels Labels compare base base_color Color base label (default: \"steelblue\") compare_color Color comparison labels (default: \"orangered\") segment_type SAP objects: Type segments ('motifs', 'syllables', 'bouts', 'segments') data_type SAP objects: Type embedding data ('feat.embeds', 'traj.embeds') verbose SAP objects: Whether print progress messages","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","text":"default method: ggplot object SAP objects: Updated SAP object plot side effect","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","text":"Supports two visualization modes: Standard mode: Continuous color mapping trajectory visualization Overlay mode: Direct comparison trajectory patterns","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/plot_umap2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot UMAP Visualization for Trajectory Analysis — plot_umap2","text":"","code":"if (FALSE) { # \\dontrun{ # Basic trajectory plot plot_umap2(traj_df, color.by = \".time\")  # Overlay comparison plot plot_umap2(traj_df,            overlay_mode = TRUE,            base_label = \"a\",            compare_labels = c(\"b\", \"c\"))  # Plot motif trajectories from SAP object plot_umap2(sap_obj,            segment_type = \"motifs\",            data_type = \"traj.embeds\",            color.by = \".time\")  # Compare trajectories between labels plot_umap2(sap_obj,            segment_type = \"motifs\",            data_type = \"traj.embeds\",            overlay_mode = TRUE,            base_label = \"pre\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/print.segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for segment objects — print.segment","title":"Print method for segment objects — print.segment","text":"Print method segment objects","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/print.segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for segment objects — print.segment","text":"","code":"# S3 method for class 'segment' print(x, ...)"},{"path":"https://lxiao06.github.io/ASAP/reference/print.segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for segment objects — print.segment","text":"x segment object ... Additional arguments passed print","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":null,"dir":"Reference","previous_headings":"","what":"Refine Fundamental Frequency Detection — refine_FF","title":"Refine Fundamental Frequency Detection — refine_FF","text":"Refines fundamental frequency detection identifying regions reliable pitch tracking using various methods applying temporal constraints.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refine Fundamental Frequency Detection — refine_FF","text":"","code":"refine_FF(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   reference_label,   method = c(\"quantile\", \"hmm\"),   minimal_duration = 20,   split_dips = TRUE,   quantile_threshold = 0.5,   hmm_trans_prob = 0.9,   random_seed = 222,   plot = TRUE,   plot_freq_lim = NULL,   color_palette = NULL,   stats = TRUE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refine Fundamental Frequency Detection — refine_FF","text":"x Sap object containing fundamental frequency pitch goodness data segment_type Character, type segment analyze: \"motifs\", \"syllables\", \"segments\" reference_label Character, label use reference template creation method Character, method template creation: \"quantile\" \"hmm\" minimal_duration Numeric, minimum duration (ms) valid segments split_dips Logical, whether split segments significant dips goodness quantile_threshold Numeric, threshold quantile method (0-1). Controls sensitivity pitch detection - higher values (e.g., 0.7) retain high-quality regions, lower values (e.g., 0.3) include regions may introduce noise hmm_trans_prob Numeric, transition probability HMM method (0-1). Controls state persistence - higher values (e.g., 0.95) create fewer, longer segments; lower values (e.g., 0.8) create , shorter segments random_seed Numeric, seed reproducibility plot Logical, whether plot results plot_freq_lim Numeric vector length 2, frequency limits plotting color_palette Function, color palette plotting stats Logical, whether calculate segment statistics verbose Logical, whether print access information ... Additional arguments passed plotting functions","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refine Fundamental Frequency Detection — refine_FF","text":"Invisibly returns modified Sap object refined fundamental frequency data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Refine Fundamental Frequency Detection — refine_FF","text":"function uses either quantile-based thresholding Hidden Markov Models identify regions reliable pitch tracking. can optionally split segments local minima pitch goodness applies minimum duration constraints.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"method-selection","dir":"Reference","previous_headings":"","what":"Method Selection","title":"Refine Fundamental Frequency Detection — refine_FF","text":"Quantile method: Simple thresholding based pitch goodness values. Works well clean recordings good signal--noise ratio. HMM method: Uses Hidden Markov Model identify segments. robust noise can better detect natural boundaries signal.","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"quantile-threshold-quantile-threshold-","dir":"Reference","previous_headings":"","what":"Quantile Threshold (quantile_threshold)","title":"Refine Fundamental Frequency Detection — refine_FF","text":"0.3-0.4: Liberal threshold includes pitch-tracked regions. Use high-quality recordings want maximize data retention. 0.5-0.6: Balanced threshold (default). Works well recordings. 0.7-0.8: Conservative threshold includes regions reliable pitch tracking. Use noisy recordings precision important recall.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"hmm-transition-probability-hmm-trans-prob-","dir":"Reference","previous_headings":"","what":"HMM Transition Probability (hmm_trans_prob)","title":"Refine Fundamental Frequency Detection — refine_FF","text":"0.8-0.85: Creates responsive segmentation shorter segments. Use analyzing rapid vocalizations frequent transitions. 0.9: Balanced setting (default). Works well vocalizations. 0.95-0.98: Creates stable segmentation fewer, longer segments. Use sustained vocalizations want minimize -segmentation.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Refine Fundamental Frequency Detection — refine_FF","text":"HMM method requires 'depmixS4' package installed.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_FF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refine Fundamental Frequency Detection — refine_FF","text":"","code":"if (FALSE) { # \\dontrun{ # Default quantile method with balanced threshold sap <- refine_FF(sap,                   reference_label = \"BL\",                   method = \"quantile\",                   quantile_threshold = 0.5,                   plot = TRUE)  # Conservative quantile threshold for noisy recordings sap <- refine_FF(sap,                   reference_label = \"BL\",                   method = \"quantile\",                   quantile_threshold = 0.7)  # HMM method with default transition probability sap <- refine_FF(sap,                   reference_label = \"BL\",                   method = \"hmm\",                   hmm_trans_prob = 0.9)  # HMM method for sustained vocalizations sap <- refine_FF(sap,                   reference_label = \"BL\",                   method = \"hmm\",                   hmm_trans_prob = 0.95) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/refine_motif_boundaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","title":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","text":"Adjusts motif boundaries based underlying segments optional label-specific time adjustments. Integrates segment information determine precise motif onsets/offsets.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_motif_boundaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","text":"","code":"refine_motif_boundaries(x, adjustments_by_label = NULL, verbose = TRUE)"},{"path":"https://lxiao06.github.io/ASAP/reference/refine_motif_boundaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","text":"x SAP object containing 'segments' 'motifs' data adjustments_by_label Optional named list time adjustments (seconds) apply motif end limits, names correspond labels verbose Logical flag printing progress messages (default: TRUE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_motif_boundaries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","text":"Returns modified SAP object updated motifs containing: motif_onset - Precise start time based segments motif_offset - Precise end time based segments first_seg_index - First segment index motif last_seg_index - Last segment index motif motif_duration - Calculated motif duration","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_motif_boundaries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","text":"Key operations: Applies label-specific time adjustments motif end limits Identifies segments contained within adjusted motif boundaries Calculates precise motif timing based contained segments Preserves original motif structure adding new timing columns","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_motif_boundaries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refine Motif Boundaries Using Segment Alignment — refine_motif_boundaries","text":"","code":"if (FALSE) { # \\dontrun{ # Apply 0.1s extension to \"BL\" motifs sap <- refine_motif_boundaries(   sap,   adjustments_by_label = list(BL = 0.1) ) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":null,"dir":"Reference","previous_headings":"","what":"Refine Spectral Entropy Using Temporal Template — refine_sh","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"Refines spectral entropy measurements creating temporal template based pitch goodness. template created using either quantile thresholding Hidden Markov Model (HMM) segmentation pitch goodness values reference label.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"","code":"refine_sh(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   reference_label,   matrix = c(\"weiner\", \"shannon\"),   method = c(\"quantile\", \"hmm\"),   minimal_duration = 20,   split_dips = TRUE,   quantile_threshold = 0.5,   random_seed = 222,   plot = TRUE,   plot_entropy_lim = NULL,   color_palette = NULL,   stats = TRUE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"x Sap object containing spectral entropy pitch goodness measurements segment_type Character, type segments analyze: \"motifs\", \"syllables\", \"segments\" reference_label Character, label use reference template creation matrix Character, type entropy matrix refine: \"weiner\" \"shannon\" method Character, method template creation: \"quantile\" \"hmm\" minimal_duration Numeric, minimum duration (ms) segments (default: 20) split_dips Logical, whether split segments local minima (default: TRUE) quantile_threshold Numeric, threshold quantile method (default: 0.5) random_seed Integer, seed reproducibility HMM (default: 222) plot Logical, whether plot results (default: TRUE) plot_entropy_lim Numeric vector length 2, limits entropy plot color_palette Function, custom color palette plotting stats Logical, whether calculate segment statistics (default: TRUE) verbose Logical, whether print progress messages (default: TRUE) ... Additional arguments passed plotting functions","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"Invisibly returns modified Sap object refined spectral entropy data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"function creates temporal template based pitch goodness values reference label, used filter spectral entropy measurements. template can created using either quantile threshold HMM segmentation. filtered entropy values stored Sap object can visualized heatmap template overlay.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"HMM method: Visser, ., & Speekenbrink, M. (2010). depmixS4: R Package Hidden Markov Models. Journal Statistical Software, 36(7), 1-21.","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/refine_sh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refine Spectral Entropy Using Temporal Template — refine_sh","text":"","code":"if (FALSE) { # \\dontrun{ # Refine Wiener entropy using quantile method sap <- refine_sh(sap,                  segment_type = \"motifs\",                  reference_label = \"a\",                  matrix = \"weiner\",                  method = \"quantile\",                  plot = TRUE)  # Refine Shannon entropy using HMM method sap <- refine_sh(sap,                  segment_type = \"motifs\",                  reference_label = \"a\",                  matrix = \"shannon\",                  method = \"hmm\",                  plot = TRUE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/run_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Principal Component Analysis — run_pca","title":"Run Principal Component Analysis — run_pca","text":"generic function perform PCA support multiple methods large-scale data processing.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Principal Component Analysis — run_pca","text":"","code":"run_pca(x, ...)  # Default S3 method run_pca(   x,   method = c(\"irlba\", \"base\", \"parallel\"),   n_components = 50,   n_cores = NULL,   diagnostic_plots = TRUE,   output_scores = TRUE,   scale_scores = FALSE,   ... )  # S3 method for class 'Sap' run_pca(   x,   segment_type = c(\"motifs\", \"syllables\", \"bouts\", \"segments\"),   data_type = \"traj_mat\",   method = c(\"irlba\", \"base\", \"parallel\"),   n_components = 50,   n_cores = NULL,   diagnostic_plots = TRUE,   scale_scores = FALSE,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/run_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Principal Component Analysis — run_pca","text":"x object analyze, either matrix/data frame SAP object ... Additional arguments passed specific methods method PCA method ('irlba', 'base', 'parallel') n_components Number principal components n_cores Number cores parallel processing diagnostic_plots Whether create diagnostic plots output_scores Whether return PC scores scale_scores Whether scale PC scores segment_type SAP objects: Type segments analyze ('motifs', 'syllables', 'bouts', 'segments') data_type SAP objects: Type data analyze verbose SAP objects: Whether print progress","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Principal Component Analysis — run_pca","text":"default method: PCA results PC scores matrix SAP objects: Updated SAP object PCA results stored features slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_pca.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run Principal Component Analysis — run_pca","text":"generic function supports PCA two methods: Default method matrices multiple PCA implementations SAP object method organized trajectory data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run Principal Component Analysis — run_pca","text":"","code":"if (FALSE) { # \\dontrun{ # Run PCA on matrix pca <- run_pca(matrix, method = \"irlba\", n_components = 50)  # Run PCA on SAP object sap_obj <- run_pca(sap_object,                    segment_type = \"motifs\",                    data_type = \"traj_mat\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/run_umap.html","id":null,"dir":"Reference","previous_headings":"","what":"Run UMAP Dimensionality Reduction — run_umap","title":"Run UMAP Dimensionality Reduction — run_umap","text":"generic function perform UMAP dimensionality reduction feature data.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_umap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run UMAP Dimensionality Reduction — run_umap","text":"","code":"run_umap(x, ...)  # Default S3 method run_umap(   x,   metadata_cols = NULL,   scale = TRUE,   n_neighbors = 15,   n_components = 2,   min_dist = 0.1,   seed = 222,   n_threads = NULL,   verbose = TRUE,   ... )  # S3 method for class 'Sap' run_umap(   x,   segment_type = c(\"motifs\", \"syllables\", \"bouts\", \"segments\"),   data_type = c(\"spectral_feature\", \"spectrogram\", \"traj_mat\"),   label = NULL,   scale = TRUE,   n_neighbors = 20,   n_components = 2,   min_dist = 0.1,   seed = 222,   n_threads = NULL,   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/run_umap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run UMAP Dimensionality Reduction — run_umap","text":"x object analyze, either data frame SAP object ... Additional arguments passed specific methods metadata_cols Column indices metadata (default method) scale Whether scale features UMAP n_neighbors Number neighbors (default: 15) n_components Number output dimensions (default: 2) min_dist Minimum distance parameter (default: 0.1) seed Random seed reproducibility n_threads Number computation threads verbose Whether print progress messages segment_type SAP objects: Type segments analyze ('motifs', 'syllables', 'bouts', 'segments') data_type SAP objects: Type feature data ('spectral_feature','spectrogram', 'traj_mat') label SAP objects: Specific label filter data","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_umap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run UMAP Dimensionality Reduction — run_umap","text":"default method: Matrix UMAP coordinates SAP objects: Updated SAP object UMAP coordinates stored features slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_umap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run UMAP Dimensionality Reduction — run_umap","text":"generic function supports UMAP analysis two methods: Default method feature data frames SAP object method organized song features","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/run_umap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run UMAP Dimensionality Reduction — run_umap","text":"","code":"if (FALSE) { # \\dontrun{ # Run UMAP on feature data frame coords <- run_umap(features,                    metadata_cols = c(1:5),                    n_neighbors = 15)  # Run UMAP on SAP object sap_obj <- run_umap(sap_object,                     segment_type = \"motifs\",                     data_type = \"spectral_feature\")  # UMAP with specific parameters coords <- run_umap(features,                    metadata_cols = 1:3,                    scale = TRUE,                    n_neighbors = 20,                    seed = 123)  # UMAP with label filtering sap_obj <- run_umap(sap_obj,                     segment_type = \"syllables\",                     data_type = \"spectral_feature\",                     label = \"a\") } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/sample_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample Rows from a Vector — sample_rows","title":"Sample Rows from a Vector — sample_rows","text":"internal helper function sample specified number rows given vector row indices.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/sample_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample Rows from a Vector — sample_rows","text":"","code":"sample_rows(rows, n)"},{"path":"https://lxiao06.github.io/ASAP/reference/sample_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample Rows from a Vector — sample_rows","text":"rows vector row indices n Number rows sample","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/sample_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample Rows from a Vector — sample_rows","text":"vector sampled row indices","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Segment Audio into Syllables — segment","title":"Segment Audio into Syllables — segment","text":"Segments audio recordings syllables using dynamic thresholding spectrograms.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Segment Audio into Syllables — segment","text":"","code":"segment(x, ...)  # Default S3 method segment(   x,   start_time = NULL,   end_time = NULL,   wl = 256,   ovlp = 80,   fftw = TRUE,   flim = c(1, 10),   silence_threshold = 0.05,   min_syllable_ms = 50,   max_syllable_ms = 200,   min_level_db = 0,   max_level_db = 40,   db_delta = 5,   search_direction = c(\"up\", \"down\"),   verbose = TRUE,   plot = TRUE,   smooth = FALSE,   save_plot = FALSE,   plot_dir = NULL,   ... )  # S3 method for class 'Sap' segment(   x,   day = NULL,   indices = NULL,   segment_type = c(\"bouts\", \"motifs\"),   cores = NULL,   save_plot = FALSE,   plot_percent = 10,   wl = 256,   ovlp = 80,   fftw = TRUE,   flim = c(1, 10),   silence_threshold = 0.05,   min_syllable_ms = 50,   max_syllable_ms = 200,   min_level_db = 0,   max_level_db = 40,   db_delta = 5,   search_direction = c(\"up\", \"down\"),   verbose = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Segment Audio into Syllables — segment","text":"x object segment, either file path SAP object ... Additional arguments passed specific methods start_time Start time seconds end_time End time seconds wl Window length spectrogram (default: 256) ovlp Overlap percentage (0-100) (default: 80) fftw Logical, use FFTW (default: TRUE) flim Frequency limits kHz (default: c(1, 10)) silence_threshold Threshold silence detection (0-1) (default: 0.05) min_syllable_ms Minimum syllable length milliseconds (default: 50) max_syllable_ms Maximum syllable length milliseconds (default: 200) min_level_db Minimum threshold level dB (Default 0) max_level_db Maximum threshold level dB (Default 40) db_delta Step size threshold search dB (default: 5) search_direction Direction threshold search: \"\" \"\". \"\": Starts min_level_db increases (recommended quiet variable recordings) \"\": Starts max_level_db decreases (recommended loud, clear recordings) verbose Print progress messages (default: TRUE) plot Display detection plot (default: TRUE) smooth Smooth spectrogram visualization (default: FALSE) save_plot Save detection plot (default: FALSE) plot_dir Directory save plots day SAP objects: Days process indices SAP objects: Specific indices process segment_type SAP objects: Type segments ('bouts', 'motifs') cores SAP objects: Number processing cores plot_percent SAP objects: Percentage files plot (default: 10)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Segment Audio into Syllables — segment","text":"Returns data frame containing syllable information: filename: Name audio file selec: Sequential number syllable threshold: Final threshold used detection .start: Start time relative analyzed segment .end: End time relative analyzed segment start_time: Absolute start time original audio file end_time: Absolute end time original audio file duration: Duration syllable seconds silence_gap: Gap next syllable seconds (NA last syllable) syllables detected, returns NULL. SAP objects: Updated object syllable information segments slot","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/segment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Segment Audio into Syllables — segment","text":"WAV files: Reads validates audio file Computes spectrogram using Short-Time Fourier Transform Performs adaptive thresholding detect syllables Validates detected segments duration constraints SAP objects: Supports batch processing parallel execution Processes specific days indices Organizes results source type Maintains metadata relationships dB Scale Conversion: User input: 0 40 dB (intuitive positive scale) Internal conversion: Subtracts reference level (20 dB) Actual dBFS: -60 -20 dB relative full scale Search Direction Guidelines: Use \"\" : Recording variable amplitude Background noise significant Want detect quieter syllables Use \"\" : Recording clean good SNR Want avoid false positives Syllables consistently loud","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/segment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Segment Audio into Syllables — segment","text":"","code":"if (FALSE) { # \\dontrun{ # Basic segmentation of WAV file syllables <- segment(\"song.wav\")  # Custom parameters for clean recording syllables <- segment(\"clean_song.wav\",                      search_direction = \"down\",                      min_syllable_ms = 30,                      max_syllable_ms = 150)  # Process specific days in SAP object sap_obj <- segment(sap_object,                    segment_type = \"bouts\",                    day = c(30, 40),                    cores = 4)  # Process with custom detection parameters sap_obj <- segment(sap_object,                    segment_type = \"motifs\",                    min_level_db = 10,                    max_level_db = 30,                    save_plot = TRUE) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Spectral Analysis Function — spectral_analysis","title":"Internal Spectral Analysis Function — spectral_analysis","text":"Internal function perform spectral analysis single audio segment. Internal functions adapted warbleR package spectral analysis. functions modified versions original warbleR code.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Spectral Analysis Function — spectral_analysis","text":"","code":"spectral_analysis(   x,   wav_dir = NULL,   wl = 512,   ovlp = 50,   wn = \"hanning\",   fftw = TRUE,   freq_range = NULL,   threshold = 15,   fsmooth = 0.1,   fast = TRUE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Spectral Analysis Function — spectral_analysis","text":"x Single row data frame segment information wav_dir Path WAV files directory wl Window length analysis ovlp Overlap percentage wn Window name freq_range Frequency range threshold Detection threshold fsmooth Smoothing parameter fast Skip peak frequency calculation ... Additional arguments","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Spectral Analysis Function — spectral_analysis","text":"Data frame spectral features","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_analysis.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal Spectral Analysis Function — spectral_analysis","text":"Original source: warbleR package Citation: Araya-Salas, M. Smith-Vidaurre, G. (2017), warbleR: r package streamline analysis animal acoustic signals. Methods Ecol Evol. 8, 184-191.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_entropy.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","title":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","text":"Calculates spectral entropy (Wiener Shannon) audio segments, providing measures spectral uniformity complexity sound signals.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_entropy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","text":"","code":"spectral_entropy(x, ...)  # Default S3 method spectral_entropy(   x,   start_time = NULL,   end_time = NULL,   wl = 512,   wn = \"hanning\",   ovlp = 50,   fftw = TRUE,   freq_range = c(500, 15000),   threshold = 10,   method = c(\"weiner\", \"shannon\"),   normalize = FALSE,   plot = TRUE,   ... )  # S3 method for class 'data.frame' spectral_entropy(   x,   wav_dir = NULL,   wl = 512,   wn = \"hanning\",   ovlp = 50,   fftw = TRUE,   freq_range = c(500, 15000),   threshold = 10,   method = c(\"weiner\", \"shannon\"),   normalize = FALSE,   plot = TRUE,   plot_entropy_lim = NULL,   color_palette = NULL,   n_colors = 500,   cores = NULL,   ... )  # S3 method for class 'Sap' spectral_entropy(   x,   segment_type = c(\"motifs\", \"syllables\", \"segments\"),   sample_percent = NULL,   balanced = FALSE,   labels = NULL,   clusters = NULL,   cores = NULL,   seed = 222,   wl = 512,   wn = \"hanning\",   ovlp = 50,   fftw = TRUE,   freq_range = c(500, 15000),   threshold = 10,   method = c(\"weiner\", \"shannon\"),   normalize = FALSE,   plot = TRUE,   plot_entropy_lim = NULL,   color_palette = NULL,   n_colors = 500,   ordered = FALSE,   descending = TRUE,   verbose = TRUE,   ... )  # S3 method for class 'matrix' spectral_entropy(   x,   labels = NULL,   plot_entropy_lim = NULL,   color_palette = NULL,   n_colors = 500,   main = \"Spectral Entropy Heatmap\",   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_entropy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","text":"x Input object: character: path WAV file (default method) data frame: containing segment information SAP object Pre-computed matrix spectral entropy ... Additional arguments passed levelplot start_time Numeric, start time seconds (default method) end_time Numeric, end time seconds (default method) wl Window length FFT (default: 512) wn Window name FFT (default: \"hanning\") ovlp Overlap percentage windows (default: 50) fftw Logical, use FFTW (default: TRUE) freq_range Frequency range analysis c(min, max) Hz (default: c(500, 15000)) threshold Amplitude threshold power spectrum (default: 10) method Entropy type (\"weiner\" \"shannon\") normalize Logical, whether normalize entropy values (default: FALSE) plot Logical, whether plot results (default: TRUE) wav_dir Directory containing WAV files (data frame methods) plot_entropy_lim Optional limits entropy plot c(min, max) color_palette Custom color palette function n_colors Number colors palette (default: 500) cores Number cores parallel processing segment_type SAP objects: Type segments (currently 'motifs') sample_percent SAP objects: Percentage segments sample balanced SAP objects: Whether balance samples across labels labels Optional vector labels subsetting grouping clusters SAP objects: Numeric vector cluster IDs include seed Random seed sampling (default: 222) ordered SAP objects: Whether order feature embeddings descending SAP objects: Direction embedding-based ordering verbose Logical, whether print progress messages main Plot title (matrix method)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_entropy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","text":"Depending method used: Default method (WAV file): Matrix columns: time, entropy Data frame method: List components: entropy_matrix, reference_time, original_times, plot (plot=TRUE) SAP method: SAP object Updated entropy features Matrix method: Lattice plot (invisibly)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_entropy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","text":"Wiener entropy measures uniformity power distribution: Non-normalized (default): returns log-scaled values -Inf 0 0 indicates uniform distribution (white noise) Large negative values indicate structured sound (pure tones) Normalized: returns values 0 1 1 indicates uniform distribution Values close 0 indicate structured sound Shannon entropy measures information content: Non-normalized: returns values >= 0 Higher values indicate uniformity/randomness Lower values indicate structure/predictability Normalized: returns values 0 1 Scale relative maximum possible entropy vector length","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/spectral_entropy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Spectral Entropy for Audio Segments — spectral_entropy","text":"","code":"if (FALSE) { # \\dontrun{ # Calculate entropy for a single WAV file entropy <- spectral_entropy(\"path/to/sound.wav\",                           start_time = 1,                           end_time = 2,                           method = \"weiner\",                           normalize = FALSE)  # Calculate normalized Shannon entropy for multiple segments using data frame method entropy_list <- spectral_entropy(segments,                                wav_dir = \"path/to/wavs\",                                method = \"shannon\",                                normalize = TRUE,                                freq_range = c(1000, 10000))  # Method for Sap objects sap <- spectral_entropy(sap,                        segment_type = \"motifs\",                        method = \"weiner\",                        normalize = FALSE,                        plot = TRUE)  # Access the entropy matrix wiener_entropy <- sap$features$motif$weiner_entropy  # Method for entropy matrices # Plot existing entropy matrix with custom settings spectral_entropy(wiener_entropy,                 plot_entropy_lim = c(-3, 0),                 color_palette = colorRampPalette(c(\"purple\", \"blue\",                                                   \"cyan\", \"yellow\",                                                   \"orange\", \"red\")),                 main = \"Custom Entropy Visualization\")  # Plot subset of entropy matrix using labels spectral_entropy(wiener_entropy,                 labels = c(\"a\", \"b\", \"c\"),                 plot_entropy_lim = c(0, 1),                 n_colors = 1000) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/split_at_dips.html","id":null,"dir":"Reference","previous_headings":"","what":"Split Template at Local Minima in Goodness — split_at_dips","title":"Split Template at Local Minima in Goodness — split_at_dips","text":"Split Template Local Minima Goodness","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/split_at_dips.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split Template at Local Minima in Goodness — split_at_dips","text":"","code":"split_at_dips(template, goodness, min_duration_samples)"},{"path":"https://lxiao06.github.io/ASAP/reference/split_at_dips.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split Template at Local Minima in Goodness — split_at_dips","text":"template Logical vector representing template goodness Numeric vector goodness values min_duration_samples Minimum number samples valid segment","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/split_at_dips.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split Template at Local Minima in Goodness — split_at_dips","text":"Logical vector segments split significant dips","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/summary.segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary method for segment objects — summary.segment","title":"Summary method for segment objects — summary.segment","text":"Summary method segment objects","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/summary.segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary method for segment objects — summary.segment","text":"","code":"# S3 method for class 'segment' summary(object, ...)"},{"path":"https://lxiao06.github.io/ASAP/reference/summary.segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary method for segment objects — summary.segment","text":"object segment object ... Additional arguments passed summary","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_sap.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","title":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","text":"Internal function perform comprehensive validation SAP object, ensuring meets required structure contains necessary components.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_sap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","text":"","code":"validate_sap(x)"},{"path":"https://lxiao06.github.io/ASAP/reference/validate_sap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","text":"x object validated SAP object","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_sap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","text":"Returns TRUE object passes validation checks. Throws informative error validation fails.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_sap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","text":"internal validation function used primarily SAP object creation manipulation. performs rigorous checks object's structure: Verifies object class 'Sap' Checks presence required components Validates type structure component Ensures specific objects correct class Required components include: metadata: data frame file recording information base_path: character string base directory motifs: segment object motif-level analysis bouts: segment object bout-level analysis syllables: segment object syllable-level analysis segments: segment object segment-level analysis templates: template_collection object features: list containing feature categories misc: list miscellaneous information version: character string representing SAP object version","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_sap.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validate a Sound Analysis Pro (SAP) Object — validate_sap","text":"internal function intended called directly users. used automatically SAP object creation manipulation.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_segment.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Segment Object — validate_segment","title":"Validate Segment Object — validate_segment","text":"internal validation function ensure integrity correctness segment object.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_segment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Segment Object — validate_segment","text":"","code":"validate_segment(x)"},{"path":"https://lxiao06.github.io/ASAP/reference/validate_segment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Segment Object — validate_segment","text":"x segment object validate","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_segment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Segment Object — validate_segment","text":"Returns TRUE object passes validation checks. Throws informative error validation fails.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_segment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Segment Object — validate_segment","text":"Performs comprehensive checks segment object: Verifies object class 'segment' Checks invalid time representations Ensures segment times non-negative Validates end times start times Specific validation checks include: Confirming object segment class Checking end times greater equal start times Ensuring time values non-negative","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_segment.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validate Segment Object — validate_segment","text":"internal validation function intended direct user calls. used automatically segment object creation manipulation.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_template_collection.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Template Collection Object — validate_template_collection","title":"Validate Template Collection Object — validate_template_collection","text":"internal validation function ensure integrity correct structure template collection object.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_template_collection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Template Collection Object — validate_template_collection","text":"","code":"validate_template_collection(x)"},{"path":"https://lxiao06.github.io/ASAP/reference/validate_template_collection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Template Collection Object — validate_template_collection","text":"x template collection object validate","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_template_collection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Template Collection Object — validate_template_collection","text":"Returns TRUE object passes validation checks. Throws informative error validation fails.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_template_collection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate Template Collection Object — validate_template_collection","text":"Performs comprehensive checks template collection: Verifies object class 'template_collection' Checks presence required components Validates structure template_info data frame Ensures template_list template_matches lists Required columns template_info include: template_name start_time end_time duration freq_min freq_max threshold clip_name clip_path source_file source_file_path creation_date","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/validate_template_collection.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validate Template Collection Object — validate_template_collection","text":"internal validation function intended direct user calls. used automatically template collection creation manipulation.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_segments.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Song Segments — visualize_segments","title":"Visualize Song Segments — visualize_segments","text":"Creates multi-panel spectrogram visualizations audio segments various sources.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_segments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Song Segments — visualize_segments","text":"","code":"visualize_segments(x, ...)  # Default S3 method visualize_segments(   x,   wav_file_dir,   n_samples = NULL,   seed = NULL,   fft_window_size = 1024,   overlap = 0.75,   dark_mode = TRUE,   legend = FALSE,   ... )  # S3 method for class 'Sap' visualize_segments(   x,   segment_type = c(\"motifs\", \"bouts\", \"segments\"),   labels = NULL,   clusters = NULL,   n_samples = NULL,   by_column = TRUE,   seed = NULL,   fft_window_size = 1024,   overlap = 0.75,   dark_mode = TRUE,   legend = FALSE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_segments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Song Segments — visualize_segments","text":"x object visualize, either data frame SAP object ... Additional arguments passed specific methods wav_file_dir default method: Directory containing WAV files n_samples Number samples display seed Random seed sample selection fft_window_size Size FFT window (default: 1024) overlap Overlap windows (default: 0.75) dark_mode Use dark theme (default: TRUE) legend Show spectrogram legend (default: FALSE) segment_type SAP objects: Type segments ('motifs', 'bouts', 'segments') labels SAP objects: Labels include clusters SAP objects: Specific clusters visualize by_column SAP objects: Arrange columns (default: TRUE)","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_segments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Song Segments — visualize_segments","text":"Generates multi-panel spectrogram plot returns input object invisibly.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_segments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Song Segments — visualize_segments","text":"data frames: Requires columns: filename, start_time, end_time Optional column: day_post_hatch hierarchical file structure Supports random sampling segments SAP objects: Supports visualization labels /clusters Flexible sampling within groups Customizable layout (row column) Automatic handling file paths","code":""},{"path":[]},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_segments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Song Segments — visualize_segments","text":"","code":"if (FALSE) { # \\dontrun{ # Visualize from data frame song_df <- data.frame(   filename = c(\"song1.wav\", \"song2.wav\"),   start_time = c(0, 10),   end_time = c(30, 40) ) visualize_segments(song_df,                    wav_file_dir = \"path/to/wav/files\",                    n_samples = 5)  # Basic SAP object visualization visualize_segments(sap_object,                    segment_type = \"motifs\",                    n_samples = 3)  # Cluster-specific visualization visualize_segments(sap_object,                    segment_type = \"segments\",                    clusters = c(1, 2),                    labels = c(\"a\", \"b\"),                    n_samples = 4)  # Custom layout visualize_segments(sap_object,                    segment_type = \"motifs\",                    by_column = FALSE,                    fft_window_size = 2048) } # }"},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_song.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Song Data — visualize_song","title":"Visualize Song Data — visualize_song","text":"Creates spectrograms visualizes acoustic data WAV files SAP objects.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_song.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Song Data — visualize_song","text":"","code":"visualize_song(x, ...)  # Default S3 method visualize_song(   x,   start_time_in_second = NULL,   end_time_in_second = NULL,   fft_window_size = 1024,   overlap = 0.5,   dark_mode = TRUE,   legend = FALSE,   keep.par = FALSE,   verbose = TRUE,   ... )  # S3 method for class 'Sap' visualize_song(   x,   template_clips = FALSE,   indices = NULL,   n_samples = NULL,   random = TRUE,   start_time_in_second = NULL,   end_time_in_second = NULL,   fft_window_size = 1024,   overlap = 0.75,   keep.par = TRUE,   verbose = FALSE,   ... )"},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_song.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Song Data — visualize_song","text":"x object visualize, either file path SAP object ... Additional arguments passed specific methods start_time_in_second Numeric start time seconds end_time_in_second Numeric end time seconds fft_window_size Size FFT window (default: 512 default, 1024 SAP) overlap Overlap windows (default: 0.5 default, 0.75 SAP) dark_mode default method: Use dark theme (default: TRUE) legend default method: Show spectrogram legend (default: FALSE) keep.par Preserve plotting parameters verbose Print processing messages template_clips Logical. SAP objects: whether visualize original songs (FALSE) template clips (TRUE) (default: FALSE) indices SAP objects: Numeric vector specific indices visualize n_samples SAP objects: Number samples visualize indices NULL. Default 6 max available random SAP objects: Randomly sample songs TRUE","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_song.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize Song Data — visualize_song","text":"Generates spectrogram plot(s) returns input object invisibly.","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_song.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Visualize Song Data — visualize_song","text":"WAV files: Creates single spectrogram using FFmpeg's FFT Customizable time range FFT settings Optional dark mode legend SAP objects: Creates multi-panel spectrograms Supports random sequential sampling Maintains plotting state sequential viewing Adds day label information plots","code":""},{"path":"https://lxiao06.github.io/ASAP/reference/visualize_song.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize Song Data — visualize_song","text":"","code":"if (FALSE) { # \\dontrun{ # Visualize a single WAV file visualize_song(\"path/to/song.wav\",                start_time_in_second = 10,                end_time_in_second = 20)  # Basic visualization from SAP object visualize_song(sap_object, n_sample = 4)  # Visualize specific indices with custom FFT settings visualize_song(sap_object,                indices = c(1, 3, 5),                fft_window_size = 2048,                overlap = 0.8)  # Sequential visualization with time ranges visualize_song(sap_object,                n_sample = 6,                random = FALSE,                start_time_in_second = rep(0, 6),                end_time_in_second = rep(5, 6)) } # }"}]
