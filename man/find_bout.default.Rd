% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bout.R
\name{find_bout.default}
\alias{find_bout.default}
\title{Detect Bouts in Single Audio File}
\usage{
\method{find_bout}{default}(
  x,
  wl = 1024,
  ovlp = 50,
  norm_method = c("quantile", "max"),
  rms_threshold = 0.1,
  min_duration = 0.5,
  gap_duration = 0.3,
  edge_window = 0.05,
  freq_range = c(3, 5),
  plot = TRUE,
  save_plot = FALSE,
  plot_dir = NULL,
  ...
)
}
\arguments{
\item{x}{Path to WAV file}

\item{wl}{Window length for RMS calculation}

\item{ovlp}{Overlap percentage between windows}

\item{norm_method}{Method for normalizing RMS values}

\item{rms_threshold}{Threshold for bout detection}

\item{min_duration}{Minimum bout duration in seconds}

\item{gap_duration}{Minimum gap between bouts}

\item{edge_window}{Time window for edge effects}

\item{freq_range}{Frequency range for bandpass filter}

\item{plot}{Whether to display visualization}

\item{save_plot}{Whether to save plots to file}

\item{plot_dir}{Directory for saving plots}

\item{...}{Additional arguments}
}
\value{
Data frame containing bout information:
\itemize{
\item filename: Name of WAV file
\item selec: Bout number
\item start_time: Onset time
\item end_time: Offset time
}
}
\description{
Analyzes a single audio recording to detect vocal bouts using
RMS amplitude thresholding with bandpass filtering.
}
\details{
Performs bout detection with the following steps:
\itemize{
\item Applies bandpass filtering
\item Calculates RMS envelope
\item Detects bouts using thresholding
\item Handles edge cases
\item Creates visualizations
}

The function applies a bandpass filter to focus on the frequency range of interest
before detecting bouts. It uses RMS amplitude thresholding on the filtered signal
and includes edge case handling for more reliable bout detection.

The frequency range should be specified based on the species' vocalization characteristics.
For example, zebra finch songs typically fall within 2-8 kHz.

Plotting behavior:
\itemize{
\item If plot=TRUE: displays plot in RStudio viewer
\item If save_plot=TRUE: saves plot to file
\item Both can be TRUE to both display and save
}
}
\examples{
\dontrun{
# Basic usage with display
bouts <- find_bout("path/to/audio.wav")

# Save plots to specific directory
bouts <- find_bout("path/to/audio.wav",
                   save_plot = TRUE,
                   plot_dir = "my_plots")

# Custom parameters with both display and save
bouts <- find_bout("path/to/audio.wav",
                   freq_range = c(2, 8),    # 2-8 kHz range
                   rms_threshold = 0.15,
                   plot = TRUE,
                   save_plot = TRUE)
}

}
\seealso{
\code{\link[seewave]{bwfilter}} for the bandpass filtering implementation
}
