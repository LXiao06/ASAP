% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/objects.R
\name{create_sap_object}
\alias{create_sap_object}
\title{Create a Sound Analysis Pro (SAP) Object from Audio Recordings}
\usage{
create_sap_object(
  base_path,
  subfolders_to_include = NULL,
  subfolders_to_exclude = c("templates", "plots"),
  labels = NULL
)
}
\arguments{
\item{base_path}{Character string specifying the base directory path containing audio recordings}

\item{subfolders_to_include}{Character vector of subfolder names to include.
If NULL, includes all subfolders except those in subfolders_to_exclude}

\item{subfolders_to_exclude}{Character vector of subfolder names to exclude.
Default excludes 'templates' and 'plots'}

\item{labels}{Character vector of labels corresponding to each subfolder.
Must match the length of subfolders if provided}
}
\value{
A SAP object containing:
\item{metadata}{Data frame with file and recording metadata}
\item{base_path}{Original base directory path}
\item{misc}{List with creation details and timestamps}
}
\description{
Creates a comprehensive SAP object from WAV files in specified directories,
with robust input validation and metadata extraction.
}
\details{
This function performs several key operations:
\itemize{
\item Validates the input base path and its contents
\item Creates metadata for WAV files using \code{create_sap_metadata()}
\item Constructs a SAP object with metadata and additional tracking information
\item Validates the created SAP object
}
}
\examples{
\dontrun{
# Create SAP object from all recordings
sap_obj <- create_sap_object("path/to/recordings")

# Create SAP object with specific subfolders and labels
sap_obj <- create_sap_object(
  base_path = "path/to/recordings",
  subfolders_to_include = c("day1", "day2"),
  labels = c("pre", "post")
)
}

}
\seealso{
\code{\link{create_sap_metadata}} for metadata extraction
\code{\link{validate_sap}} for SAP object validation
}
